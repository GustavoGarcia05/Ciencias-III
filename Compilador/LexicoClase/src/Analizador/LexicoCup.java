/* The following code was generated by JFlex 1.4.3 on 22/07/20 07:58 AM */

package Analizador;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/07/20 07:58 AM from the specification file
 * <tt>../LexicoClase/src/Analizador/LexicoCup.flex</tt>
 */
class LexicoCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  8,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    51, 40,  9,  0,  0, 43, 38,  0, 44, 45, 37, 35, 50, 36, 53,  7, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 33, 52, 42, 34, 41,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1, 24,  1,  1,  1,  1,  1,  1,  1, 48,  0, 49,  0,  1, 
     0, 15, 10, 13, 21, 12, 20, 19, 14,  4, 31, 25, 17, 26,  5, 18, 
    29,  1, 16, 23,  6, 22, 27, 30, 28, 11, 32, 46, 39, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\2\1\5\1\6"+
    "\21\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\1\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\4\1\27\1\30\1\31\1\32\7\2"+
    "\1\4\1\33\15\2\1\34\14\2\1\35\22\2\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\0\1\4\1\54"+
    "\1\2\1\55\5\2\1\56\23\2\1\57\3\2\1\60"+
    "\7\2\1\61\32\2\2\0\3\2\1\62\1\2\1\63"+
    "\1\2\1\64\1\65\1\66\1\2\1\67\1\70\1\71"+
    "\5\2\1\72\6\2\1\73\3\2\1\74\10\2\1\75"+
    "\15\2\1\76\1\2\1\77\7\2\1\3\1\0\4\2"+
    "\1\100\1\101\1\2\1\102\3\2\1\103\1\104\1\2"+
    "\1\105\7\2\1\106\1\107\5\2\1\110\1\111\5\2"+
    "\1\112\12\2\1\113\1\0\4\2\1\114\1\2\1\115"+
    "\4\2\1\116\1\2\1\117\7\2\1\120\1\121\1\122"+
    "\2\2\1\123\1\124\1\125\1\126\2\2\1\127\1\130"+
    "\2\2\1\131\1\0\5\2\1\132\5\2\1\133\1\134"+
    "\1\135\2\2\1\136\1\2\1\137\1\2\1\140\1\2"+
    "\1\0\1\141\1\2\1\142\1\2\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\1\151\2\2\1\152\1\2\1\0"+
    "\1\153\1\154\1\155\1\2\1\156\1\0\1\157\22\0"+
    "\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\66\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\66\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\66"+
    "\0\66\0\66\0\66\0\66\0\u07ce\0\66\0\u0804\0\154"+
    "\0\154\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\66\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\154"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\154\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\154"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\154\0\u191a\0\u1950\0\u1986\0\154"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\154"+
    "\0\u21f6\0\154\0\u222c\0\154\0\154\0\154\0\u2262\0\u2298"+
    "\0\154\0\154\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\154"+
    "\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\154\0\u2520"+
    "\0\u2556\0\u258c\0\154\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\154\0\u2772\0\u27a8\0\u27de\0\u2814"+
    "\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4"+
    "\0\u29fa\0\154\0\u2a30\0\154\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\66\0\u2be0\0\u2c16\0\u2c4c\0\u2c82"+
    "\0\u2cb8\0\154\0\154\0\u2cee\0\154\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\154\0\154\0\u2dc6\0\154\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e"+
    "\0\u2ed4\0\u2f0a\0\u2f40\0\154\0\154\0\u2f76\0\u2fac\0\u2fe2"+
    "\0\u3018\0\u304e\0\154\0\154\0\u3084\0\u30ba\0\u30f0\0\u3126"+
    "\0\u315c\0\154\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\154\0\u33ae\0\u33e4\0\u341a"+
    "\0\u3450\0\u3486\0\154\0\u34bc\0\154\0\u34f2\0\u3528\0\u355e"+
    "\0\u3594\0\154\0\u35ca\0\154\0\u3600\0\u3636\0\u366c\0\u36a2"+
    "\0\u36d8\0\u370e\0\u3744\0\154\0\154\0\154\0\u377a\0\u37b0"+
    "\0\154\0\154\0\154\0\154\0\u37e6\0\u381c\0\154\0\154"+
    "\0\u3852\0\u3888\0\154\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996"+
    "\0\u39cc\0\154\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\154"+
    "\0\154\0\154\0\u3b10\0\u3b46\0\154\0\u3b7c\0\154\0\u3bb2"+
    "\0\154\0\u3be8\0\u3c1e\0\154\0\u3c54\0\154\0\u3c8a\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\154\0\u3cc0\0\u3cf6"+
    "\0\154\0\u3d2c\0\u3d62\0\154\0\154\0\154\0\u3d98\0\154"+
    "\0\u3dce\0\154\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12"+
    "\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2"+
    "\0\u40f8\0\u412e\0\u4164\0\u419a\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\13\1\3\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\3\1\30\1\31\1\3\1\32\1\33\2\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\5\1\2\1\56\67\0\2\3\1\0"+
    "\3\3\3\0\27\3\27\0\1\4\66\0\1\5\4\0"+
    "\1\5\51\0\2\5\3\0\2\3\1\0\1\3\1\57"+
    "\1\3\3\0\12\3\1\60\2\3\1\61\2\3\1\62"+
    "\6\3\26\0\2\3\1\0\3\3\3\0\2\3\1\63"+
    "\2\3\1\64\6\3\1\65\12\3\26\0\2\3\1\0"+
    "\3\3\3\0\1\3\1\66\2\3\1\67\1\3\1\70"+
    "\20\3\34\0\1\71\32\0\1\72\24\0\2\3\1\0"+
    "\3\3\3\0\1\3\1\73\3\3\1\74\1\75\1\3"+
    "\1\76\16\3\26\0\2\3\1\0\1\3\1\77\1\3"+
    "\3\0\7\3\1\100\11\3\1\101\1\102\4\3\26\0"+
    "\2\3\1\0\3\3\3\0\4\3\1\103\1\104\1\3"+
    "\1\105\1\106\16\3\26\0\2\3\1\0\3\3\3\0"+
    "\1\107\14\3\1\110\11\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\111\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\10\3\1\112\16\3\26\0\2\3\1\0\3\3"+
    "\3\0\1\113\13\3\1\114\4\3\1\115\1\3\1\116"+
    "\3\3\26\0\2\3\1\0\3\3\3\0\10\3\1\117"+
    "\16\3\26\0\2\3\1\0\1\120\2\3\3\0\5\3"+
    "\1\121\1\3\1\122\1\123\16\3\26\0\2\3\1\0"+
    "\3\3\3\0\2\3\1\124\5\3\1\125\16\3\26\0"+
    "\2\3\1\0\1\126\1\127\1\3\3\0\7\3\1\130"+
    "\5\3\1\131\11\3\26\0\2\3\1\0\1\132\1\3"+
    "\1\133\3\0\1\134\1\3\1\135\1\3\1\136\17\3"+
    "\1\137\2\3\26\0\2\3\1\0\2\3\1\140\3\0"+
    "\27\3\26\0\2\3\1\0\3\3\3\0\5\3\1\141"+
    "\21\3\26\0\2\3\1\0\1\142\2\3\3\0\10\3"+
    "\1\143\16\3\26\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\144\1\145\5\3\1\146\12\3\26\0\2\3\1\0"+
    "\3\3\3\0\4\3\1\147\22\3\67\0\1\150\65\0"+
    "\1\151\1\152\64\0\1\153\1\0\1\154\63\0\1\155"+
    "\71\0\1\156\66\0\1\157\60\0\1\160\65\0\1\161"+
    "\6\0\1\162\56\0\1\163\7\0\1\164\55\0\1\165"+
    "\67\0\1\166\24\0\1\5\4\0\1\5\51\0\1\5"+
    "\1\167\3\0\2\3\1\0\2\3\1\170\3\0\27\3"+
    "\26\0\2\3\1\0\3\3\3\0\23\3\1\171\3\3"+
    "\26\0\2\3\1\0\3\3\3\0\24\3\1\172\2\3"+
    "\26\0\2\3\1\0\3\3\3\0\20\3\1\173\6\3"+
    "\26\0\2\3\1\0\3\3\3\0\7\3\1\174\17\3"+
    "\26\0\2\3\1\0\3\3\3\0\23\3\1\175\3\3"+
    "\26\0\2\3\1\0\1\176\2\3\3\0\6\3\1\177"+
    "\20\3\26\0\2\3\1\0\3\3\3\0\1\3\1\200"+
    "\12\3\1\201\12\3\25\0\10\71\1\0\55\71\1\0"+
    "\2\3\1\0\2\3\1\202\3\0\27\3\26\0\2\3"+
    "\1\0\3\3\3\0\15\3\1\203\11\3\26\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\204\24\3\26\0\2\3"+
    "\1\0\3\3\3\0\10\3\1\205\16\3\26\0\2\3"+
    "\1\0\3\3\3\0\14\3\1\206\12\3\26\0\2\3"+
    "\1\0\3\3\3\0\15\3\1\207\11\3\26\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\210\24\3\26\0\2\3"+
    "\1\0\2\3\1\211\3\0\23\3\1\212\3\3\26\0"+
    "\2\3\1\0\3\3\3\0\2\3\1\213\2\3\1\214"+
    "\21\3\26\0\2\3\1\0\2\3\1\215\3\0\15\3"+
    "\1\216\11\3\26\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\217\21\3\26\0\2\3\1\0\1\3\1\220\1\3"+
    "\3\0\27\3\26\0\2\3\1\0\3\3\3\0\15\3"+
    "\1\221\11\3\26\0\2\3\1\0\2\3\1\222\3\0"+
    "\5\3\1\223\4\3\1\224\14\3\26\0\2\3\1\0"+
    "\1\3\1\225\1\3\3\0\3\3\1\226\23\3\26\0"+
    "\2\3\1\0\3\3\3\0\25\3\1\227\1\3\26\0"+
    "\2\3\1\0\2\3\1\230\3\0\27\3\26\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\231\24\3\26\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\232\24\3\26\0\2\3"+
    "\1\0\2\3\1\233\3\0\27\3\26\0\2\3\1\0"+
    "\1\3\1\234\1\3\3\0\22\3\1\235\4\3\26\0"+
    "\2\3\1\0\3\3\3\0\7\3\1\236\17\3\26\0"+
    "\2\3\1\0\3\3\3\0\10\3\1\237\16\3\26\0"+
    "\2\3\1\0\3\3\3\0\6\3\1\240\20\3\26\0"+
    "\2\3\1\0\3\3\3\0\3\3\1\241\3\3\1\242"+
    "\17\3\26\0\2\3\1\0\3\3\3\0\14\3\1\243"+
    "\12\3\26\0\2\3\1\0\1\3\1\244\1\3\3\0"+
    "\27\3\26\0\2\3\1\0\3\3\3\0\3\3\1\245"+
    "\11\3\1\246\11\3\26\0\2\3\1\0\3\3\3\0"+
    "\10\3\1\247\16\3\26\0\2\3\1\0\1\250\2\3"+
    "\3\0\4\3\1\251\22\3\26\0\2\3\1\0\3\3"+
    "\3\0\26\3\1\252\26\0\2\3\1\0\3\3\3\0"+
    "\5\3\1\253\1\254\20\3\26\0\2\3\1\0\3\3"+
    "\3\0\1\3\1\255\25\3\26\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\256\21\3\26\0\2\3\1\0\3\3"+
    "\3\0\10\3\1\257\16\3\26\0\2\3\1\0\1\260"+
    "\2\3\3\0\27\3\26\0\2\3\1\0\3\3\3\0"+
    "\6\3\1\261\20\3\26\0\2\3\1\0\1\262\2\3"+
    "\3\0\27\3\26\0\2\3\1\0\3\3\3\0\6\3"+
    "\1\263\20\3\26\0\2\3\1\0\1\264\2\3\3\0"+
    "\7\3\1\265\17\3\26\0\2\3\1\0\3\3\3\0"+
    "\6\3\1\266\20\3\26\0\2\3\1\0\1\267\2\3"+
    "\3\0\10\3\1\270\16\3\26\0\2\3\1\0\3\3"+
    "\3\0\1\271\26\3\26\0\2\3\1\0\1\272\2\3"+
    "\3\0\27\3\27\0\1\273\66\0\1\5\4\0\1\5"+
    "\2\0\1\274\46\0\2\5\3\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\275\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\276\17\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\277\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\300\17\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\301\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\15\3\1\302\11\3\26\0\2\3\1\0\3\3"+
    "\3\0\10\3\1\303\16\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\304\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\305\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\306\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\307\21\3\26\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\310\17\3\26\0\2\3\1\0\3\3"+
    "\3\0\20\3\1\311\6\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\312\24\3\26\0\2\3\1\0\1\3"+
    "\1\313\1\3\3\0\27\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\314\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\315\17\3\26\0\2\3\1\0\3\3"+
    "\3\0\3\3\1\316\23\3\26\0\2\3\1\0\3\3"+
    "\3\0\6\3\1\305\20\3\26\0\2\3\1\0\3\3"+
    "\3\0\3\3\1\317\23\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\320\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\15\3\1\321\11\3\26\0\2\3\1\0\2\3"+
    "\1\322\3\0\15\3\1\323\11\3\26\0\2\3\1\0"+
    "\2\3\1\324\3\0\27\3\26\0\2\3\1\0\3\3"+
    "\3\0\14\3\1\325\12\3\26\0\2\3\1\0\3\3"+
    "\3\0\13\3\1\326\13\3\26\0\2\3\1\0\3\3"+
    "\3\0\11\3\1\305\15\3\26\0\2\3\1\0\3\3"+
    "\3\0\17\3\1\327\7\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\330\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\6\3\1\331\20\3\26\0\2\3\1\0\3\3"+
    "\3\0\6\3\1\332\20\3\26\0\2\3\1\0\3\3"+
    "\3\0\10\3\1\333\16\3\26\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\334\21\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\335\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\15\3\1\336\11\3\26\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\337\21\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\340\24\3\26\0\2\3\1\0\1\341"+
    "\2\3\3\0\27\3\26\0\2\3\1\0\3\3\3\0"+
    "\2\3\1\342\24\3\26\0\2\3\1\0\3\3\3\0"+
    "\1\343\26\3\26\0\2\3\1\0\2\3\1\344\3\0"+
    "\27\3\26\0\2\3\1\0\3\3\3\0\4\3\1\345"+
    "\22\3\26\0\2\3\1\0\3\3\3\0\5\3\1\346"+
    "\21\3\26\0\2\3\1\0\1\3\1\347\1\3\3\0"+
    "\27\3\26\0\2\3\1\0\1\3\1\350\1\3\3\0"+
    "\27\3\26\0\2\3\1\0\3\3\3\0\10\3\1\351"+
    "\16\3\26\0\2\3\1\0\3\3\3\0\2\3\1\352"+
    "\24\3\26\0\2\3\1\0\2\3\1\353\3\0\3\3"+
    "\1\354\23\3\26\0\2\3\1\0\3\3\3\0\14\3"+
    "\1\355\12\3\26\0\2\3\1\0\2\3\1\356\3\0"+
    "\27\3\26\0\2\3\1\0\3\3\3\0\7\3\1\357"+
    "\17\3\26\0\2\3\1\0\3\3\3\0\6\3\1\337"+
    "\20\3\26\0\2\3\1\0\2\3\1\360\3\0\27\3"+
    "\26\0\2\3\1\0\1\361\2\3\3\0\27\3\26\0"+
    "\2\3\1\0\1\3\1\362\1\3\3\0\27\3\26\0"+
    "\2\3\1\0\2\3\1\363\3\0\27\3\26\0\2\3"+
    "\1\0\3\3\3\0\13\3\1\364\13\3\26\0\2\3"+
    "\1\0\3\3\3\0\5\3\1\365\21\3\26\0\2\3"+
    "\1\0\3\3\3\0\5\3\1\366\21\3\26\0\2\3"+
    "\1\0\1\3\1\367\1\3\3\0\21\3\1\370\5\3"+
    "\26\0\2\3\1\0\2\3\1\371\3\0\27\3\26\0"+
    "\2\3\1\0\3\3\3\0\7\3\1\372\17\3\26\0"+
    "\2\3\1\0\3\3\3\0\7\3\1\373\17\3\27\0"+
    "\1\273\52\0\1\374\23\0\1\375\53\0\2\3\1\0"+
    "\3\3\3\0\6\3\1\376\20\3\26\0\2\3\1\0"+
    "\1\377\2\3\3\0\27\3\26\0\2\3\1\0\3\3"+
    "\3\0\15\3\1\u0100\11\3\26\0\2\3\1\0\3\3"+
    "\3\0\10\3\1\u0101\16\3\26\0\2\3\1\0\3\3"+
    "\3\0\24\3\1\u0102\2\3\26\0\2\3\1\0\3\3"+
    "\3\0\17\3\1\u0103\7\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0104\24\3\26\0\2\3\1\0\2\3"+
    "\1\u0105\3\0\27\3\26\0\2\3\1\0\3\3\3\0"+
    "\6\3\1\u0106\20\3\26\0\2\3\1\0\1\u0107\2\3"+
    "\3\0\27\3\26\0\2\3\1\0\3\3\3\0\17\3"+
    "\1\u0108\7\3\26\0\2\3\1\0\3\3\3\0\4\3"+
    "\1\u0109\22\3\26\0\2\3\1\0\3\3\3\0\15\3"+
    "\1\u010a\11\3\26\0\2\3\1\0\1\u010b\2\3\3\0"+
    "\27\3\26\0\2\3\1\0\2\3\1\u010c\3\0\27\3"+
    "\26\0\2\3\1\0\3\3\3\0\6\3\1\u010d\20\3"+
    "\26\0\2\3\1\0\3\3\3\0\6\3\1\u010e\20\3"+
    "\26\0\2\3\1\0\3\3\3\0\10\3\1\u010f\16\3"+
    "\26\0\2\3\1\0\3\3\3\0\3\3\1\u0110\23\3"+
    "\26\0\2\3\1\0\3\3\3\0\6\3\1\u0111\20\3"+
    "\26\0\2\3\1\0\3\3\3\0\5\3\1\u0112\21\3"+
    "\26\0\2\3\1\0\3\3\3\0\7\3\1\u0113\17\3"+
    "\26\0\2\3\1\0\3\3\3\0\13\3\1\u0114\13\3"+
    "\26\0\2\3\1\0\3\3\3\0\2\3\1\u0115\24\3"+
    "\26\0\2\3\1\0\2\3\1\305\3\0\27\3\26\0"+
    "\2\3\1\0\3\3\3\0\5\3\1\u0116\21\3\26\0"+
    "\2\3\1\0\3\3\3\0\20\3\1\u0117\6\3\26\0"+
    "\2\3\1\0\3\3\3\0\11\3\1\u0118\15\3\26\0"+
    "\2\3\1\0\3\3\3\0\7\3\1\202\17\3\26\0"+
    "\2\3\1\0\3\3\3\0\2\3\1\u0119\24\3\26\0"+
    "\2\3\1\0\3\3\3\0\12\3\1\u011a\14\3\26\0"+
    "\2\3\1\0\3\3\3\0\11\3\1\u011b\15\3\26\0"+
    "\2\3\1\0\3\3\3\0\11\3\1\u011c\15\3\26\0"+
    "\2\3\1\0\3\3\3\0\6\3\1\u011d\20\3\26\0"+
    "\2\3\1\0\3\3\3\0\10\3\1\u011e\16\3\26\0"+
    "\2\3\1\0\1\u011f\2\3\3\0\27\3\26\0\2\3"+
    "\1\0\3\3\3\0\17\3\1\u0120\7\3\26\0\2\3"+
    "\1\0\3\3\3\0\3\3\1\u0121\23\3\26\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u0122\24\3\26\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u0123\24\3\26\0\2\3"+
    "\1\0\3\3\3\0\3\3\1\u0124\23\3\26\0\2\3"+
    "\1\0\1\3\1\u0125\1\3\3\0\27\3\26\0\2\3"+
    "\1\0\3\3\3\0\14\3\1\u0126\12\3\26\0\2\3"+
    "\1\0\2\3\1\u0127\3\0\27\3\26\0\2\3\1\0"+
    "\3\3\3\0\20\3\1\u0128\6\3\26\0\2\3\1\0"+
    "\2\3\1\u0129\3\0\27\3\26\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\u012a\21\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u012b\24\3\26\0\2\3\1\0\1\u012c"+
    "\2\3\3\0\27\3\26\0\2\3\1\0\3\3\3\0"+
    "\2\3\1\u012d\24\3\42\0\1\u012e\51\0\2\3\1\0"+
    "\1\3\1\u012f\1\3\3\0\12\3\1\u0130\14\3\26\0"+
    "\2\3\1\0\3\3\3\0\3\3\1\u0131\23\3\26\0"+
    "\2\3\1\0\3\3\3\0\23\3\1\u0132\3\3\26\0"+
    "\2\3\1\0\3\3\3\0\12\3\1\u0133\14\3\26\0"+
    "\2\3\1\0\3\3\3\0\5\3\1\u0134\21\3\26\0"+
    "\2\3\1\0\1\3\1\u0135\1\3\3\0\27\3\26\0"+
    "\2\3\1\0\3\3\3\0\3\3\1\u0136\23\3\26\0"+
    "\2\3\1\0\3\3\3\0\2\3\1\u0137\24\3\26\0"+
    "\2\3\1\0\1\3\1\u0138\1\3\3\0\27\3\26\0"+
    "\2\3\1\0\3\3\3\0\5\3\1\u0139\21\3\26\0"+
    "\2\3\1\0\1\3\1\u013a\1\3\3\0\27\3\26\0"+
    "\2\3\1\0\1\3\1\u013b\1\3\3\0\27\3\26\0"+
    "\2\3\1\0\2\3\1\u013c\3\0\27\3\26\0\2\3"+
    "\1\0\1\u013d\2\3\3\0\27\3\26\0\2\3\1\0"+
    "\2\3\1\u013e\3\0\27\3\26\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\u013f\17\3\26\0\2\3\1\0\3\3"+
    "\3\0\3\3\1\u0140\23\3\26\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\u0141\21\3\26\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\u0142\21\3\26\0\2\3\1\0\3\3"+
    "\3\0\3\3\1\u0143\23\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0144\24\3\26\0\2\3\1\0\2\3"+
    "\1\u0145\3\0\27\3\26\0\2\3\1\0\3\3\3\0"+
    "\12\3\1\u0146\14\3\26\0\2\3\1\0\3\3\3\0"+
    "\3\3\1\u0147\23\3\26\0\2\3\1\0\3\3\3\0"+
    "\5\3\1\u0148\21\3\26\0\2\3\1\0\2\3\1\u0149"+
    "\3\0\27\3\26\0\2\3\1\0\3\3\3\0\13\3"+
    "\1\u014a\13\3\26\0\2\3\1\0\3\3\3\0\4\3"+
    "\1\u014b\22\3\26\0\2\3\1\0\3\3\3\0\11\3"+
    "\1\u014c\15\3\26\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\u014d\21\3\26\0\2\3\1\0\1\u014e\2\3\3\0"+
    "\27\3\26\0\2\3\1\0\3\3\3\0\15\3\1\u014f"+
    "\11\3\26\0\2\3\1\0\3\3\3\0\12\3\1\u0150"+
    "\14\3\26\0\2\3\1\0\2\3\1\u0151\3\0\27\3"+
    "\26\0\2\3\1\0\3\3\3\0\3\3\1\u0152\23\3"+
    "\26\0\2\3\1\0\3\3\3\0\3\3\1\u0153\23\3"+
    "\43\0\1\u0154\50\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\u0155\21\3\26\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\u0156\21\3\26\0\2\3\1\0\1\u0157\2\3\3\0"+
    "\27\3\26\0\2\3\1\0\3\3\3\0\5\3\1\u0158"+
    "\21\3\26\0\2\3\1\0\1\3\1\305\1\3\3\0"+
    "\27\3\26\0\2\3\1\0\1\u0159\2\3\3\0\27\3"+
    "\26\0\2\3\1\0\3\3\3\0\13\3\1\u015a\13\3"+
    "\26\0\2\3\1\0\3\3\3\0\14\3\1\u015b\12\3"+
    "\26\0\2\3\1\0\3\3\3\0\3\3\1\u015c\23\3"+
    "\26\0\2\3\1\0\3\3\3\0\7\3\1\u015d\17\3"+
    "\26\0\2\3\1\0\3\3\3\0\13\3\1\u015e\13\3"+
    "\26\0\2\3\1\0\3\3\3\0\10\3\1\u015f\16\3"+
    "\26\0\2\3\1\0\3\3\3\0\1\3\1\u0160\25\3"+
    "\26\0\2\3\1\0\3\3\3\0\4\3\1\u0161\22\3"+
    "\26\0\2\3\1\0\3\3\3\0\7\3\1\u0162\17\3"+
    "\26\0\2\3\1\0\2\3\1\u0163\3\0\27\3\26\0"+
    "\2\3\1\0\3\3\3\0\17\3\1\u0164\7\3\26\0"+
    "\2\3\1\0\2\3\1\u0165\3\0\27\3\26\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u0166\17\3\26\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u0167\17\3\26\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u0168\17\3\26\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u0169\24\3\26\0\2\3"+
    "\1\0\2\3\1\u016a\3\0\27\3\44\0\1\u016b\47\0"+
    "\2\3\1\0\3\3\3\0\7\3\1\u016c\17\3\26\0"+
    "\2\3\1\0\3\3\3\0\3\3\1\u016d\23\3\26\0"+
    "\2\3\1\0\2\3\1\u016e\3\0\27\3\26\0\2\3"+
    "\1\0\3\3\3\0\3\3\1\u016f\23\3\26\0\2\3"+
    "\1\0\2\3\1\u0170\3\0\27\3\26\0\2\3\1\0"+
    "\3\3\3\0\2\3\1\u0171\24\3\26\0\2\3\1\0"+
    "\2\3\1\u0172\3\0\27\3\26\0\2\3\1\0\3\3"+
    "\3\0\1\3\1\u0173\25\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0174\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\6\3\1\u0175\20\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0176\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0177\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\u0178\17\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0179\24\3\26\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u017a\24\3\45\0\1\u017b\46\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u017c\24\3\26\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u017d\24\3\26\0\2\3"+
    "\1\0\3\3\3\0\13\3\1\u017e\13\3\26\0\2\3"+
    "\1\0\3\3\3\0\10\3\1\u017f\16\3\26\0\2\3"+
    "\1\0\3\3\3\0\13\3\1\u0180\13\3\107\0\1\u0181"+
    "\4\0\2\3\1\0\3\3\3\0\3\3\1\u0182\23\3"+
    "\110\0\1\u0183\15\0\1\u0184\65\0\1\u0185\73\0\1\u0186"+
    "\50\0\1\u0187\66\0\1\u0188\74\0\1\u0189\133\0\1\u018a"+
    "\66\0\1\u018b\15\0\1\u018c\65\0\1\u018d\60\0\1\u018e"+
    "\73\0\1\u018f\105\0\1\u0190\37\0\1\u0191\133\0\1\u0192"+
    "\66\0\1\u0193\65\0\1\u0194\74\0\1\u0195\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16848];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\21\1\1\11\13\1\5\11"+
    "\1\1\1\11\13\1\1\11\55\1\16\11\1\0\104\1"+
    "\2\0\77\1\1\11\1\0\60\1\1\0\45\1\1\0"+
    "\26\1\1\0\17\1\1\0\5\1\1\0\1\1\22\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexicoCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 89: 
          { return new Symbol(sym.Public, yychar, yyline, yytext());
          }
        case 113: break;
        case 6: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 114: break;
        case 39: 
          { return new Symbol(sym.Mayor_o_igual_que, yychar, yyline, yytext());
          }
        case 115: break;
        case 37: 
          { return new Symbol(sym.O_Logico, yychar, yyline, yytext());
          }
        case 116: break;
        case 49: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 117: break;
        case 95: 
          { return new Symbol(sym.Virtual, yychar, yyline, yytext());
          }
        case 118: break;
        case 15: 
          { return new Symbol(sym.Menor_que, yychar, yyline, yytext());
          }
        case 119: break;
        case 17: 
          { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
          }
        case 120: break;
        case 53: 
          { return new Symbol(sym.T_dato, yychar, yyline, yytext());
          }
        case 121: break;
        case 28: 
          { return new Symbol(sym.As, yychar, yyline, yytext());
          }
        case 122: break;
        case 74: 
          { return new Symbol(sym.Sbyte, yychar, yyline, yytext());
          }
        case 123: break;
        case 51: 
          { return new Symbol(sym.This, yychar, yyline, yytext());
          }
        case 124: break;
        case 84: 
          { return new Symbol(sym.Sealed, yychar, yyline, yytext());
          }
        case 125: break;
        case 91: 
          { return new Symbol(sym.Finally, yychar, yyline, yytext());
          }
        case 126: break;
        case 106: 
          { return new Symbol(sym.Volatile, yychar, yyline, yytext());
          }
        case 127: break;
        case 26: 
          { return new Symbol(sym.Is, yychar, yyline, yytext());
          }
        case 128: break;
        case 62: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 129: break;
        case 103: 
          { return new Symbol(sym.Override, yychar, yyline, yytext());
          }
        case 130: break;
        case 19: 
          { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
          }
        case 131: break;
        case 59: 
          { return new Symbol(sym.Lock, yychar, yyline, yytext());
          }
        case 132: break;
        case 99: 
          { return new Symbol(sym.Explicit, yychar, yyline, yytext());
          }
        case 133: break;
        case 65: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 134: break;
        case 4: 
          { /*Ignore*/
          }
        case 135: break;
        case 110: 
          { return new Symbol(sym.Protected, yychar, yyline, yytext());
          }
        case 136: break;
        case 72: 
          { return new Symbol(sym.Ulong, yychar, yyline, yytext());
          }
        case 137: break;
        case 67: 
          { return new Symbol(sym.Catch, yychar, yyline, yytext());
          }
        case 138: break;
        case 86: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 139: break;
        case 81: 
          { return new Symbol(sym.Ushort, yychar, yyline, yytext());
          }
        case 140: break;
        case 85: 
          { return new Symbol(sym.Switch, yychar, yyline, yytext());
          }
        case 141: break;
        case 112: 
          { return new Symbol(sym.P_coma, yychar, yyline, yytext());
          }
        case 142: break;
        case 50: 
          { return new Symbol(sym.Null, yychar, yyline, yytext());
          }
        case 143: break;
        case 100: 
          { return new Symbol(sym.Continue, yychar, yyline, yytext());
          }
        case 144: break;
        case 11: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 145: break;
        case 30: 
          { return new Symbol(sym.Igual_a, yychar, yyline, yytext());
          }
        case 146: break;
        case 13: 
          { return new Symbol(sym.O_Logico_Bit, yychar, yyline, yytext());
          }
        case 147: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 148: break;
        case 35: 
          { return new Symbol(sym.Asignacion_multiplicacion, yychar, yyline, yytext());
          }
        case 149: break;
        case 108: 
          { return new Symbol(sym.Namespace, yychar, yyline, yytext());
          }
        case 150: break;
        case 97: 
          { return new Symbol(sym.Internal, yychar, yyline, yytext());
          }
        case 151: break;
        case 77: 
          { return new Symbol(sym.Extern, yychar, yyline, yytext());
          }
        case 152: break;
        case 47: 
          { return new Symbol(sym.Ref, yychar, yyline, yytext());
          }
        case 153: break;
        case 94: 
          { return new Symbol(sym.Statict, yychar, yyline, yytext());
          }
        case 154: break;
        case 32: 
          { return new Symbol(sym.Incremento_unitario, yychar, yyline, yytext());
          }
        case 155: break;
        case 31: 
          { return new Symbol(sym.Asignacion_suma, yychar, yyline, yytext());
          }
        case 156: break;
        case 43: 
          { return new Symbol(sym.Asignacion_modulo, yychar, yyline, yytext());
          }
        case 157: break;
        case 107: 
          { return new Symbol(sym.Interface, yychar, yyline, yytext());
          }
        case 158: break;
        case 68: 
          { return new Symbol(sym.Class, yychar, yyline, yytext());
          }
        case 159: break;
        case 64: 
          { return new Symbol(sym.Throw, yychar, yyline, yytext());
          }
        case 160: break;
        case 56: 
          { return new Symbol(sym.Enum, yychar, yyline, yytext());
          }
        case 161: break;
        case 8: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 162: break;
        case 76: 
          { return new Symbol(sym.Typeof, yychar, yyline, yytext());
          }
        case 163: break;
        case 40: 
          { return new Symbol(sym.Desplazar_a_derecha, yychar, yyline, yytext());
          }
        case 164: break;
        case 58: 
          { return new Symbol(sym.Case, yychar, yyline, yytext());
          }
        case 165: break;
        case 54: 
          { return new Symbol(sym.Base, yychar, yyline, yytext());
          }
        case 166: break;
        case 111: 
          { return new Symbol(sym.Stackalloc, yychar, yyline, yytext());
          }
        case 167: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 168: break;
        case 22: 
          { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
          }
        case 169: break;
        case 12: 
          { return new Symbol(sym.Y_Logico_Bit, yychar, yyline, yytext());
          }
        case 170: break;
        case 57: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 171: break;
        case 27: 
          { return new Symbol(sym.Asignacion_division, yychar, yyline, yytext());
          }
        case 172: break;
        case 44: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 173: break;
        case 101: 
          { return new Symbol(sym.Abstract, yychar, yyline, yytext());
          }
        case 174: break;
        case 16: 
          { return new Symbol(sym.Mayor_que, yychar, yyline, yytext());
          }
        case 175: break;
        case 52: 
          { return new Symbol(sym.True, yychar, yyline, yytext());
          }
        case 176: break;
        case 45: 
          { return new Symbol(sym.New, yychar, yyline, yytext());
          }
        case 177: break;
        case 73: 
          { return new Symbol(sym.Using, yychar, yyline, yytext());
          }
        case 178: break;
        case 93: 
          { return new Symbol(sym.Decimal, yychar, yyline, yytext());
          }
        case 179: break;
        case 9: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 180: break;
        case 96: 
          { return new Symbol(sym.Private, yychar, yyline, yytext());
          }
        case 181: break;
        case 42: 
          { return new Symbol(sym.Desplazar_a_izquierda, yychar, yyline, yytext());
          }
        case 182: break;
        case 80: 
          { return new Symbol(sym.Unsafe, yychar, yyline, yytext());
          }
        case 183: break;
        case 105: 
          { return new Symbol(sym.Delegate, yychar, yyline, yytext());
          }
        case 184: break;
        case 83: 
          { return new Symbol(sym.Struct, yychar, yyline, yytext());
          }
        case 185: break;
        case 90: 
          { return new Symbol(sym.Checked, yychar, yyline, yytext());
          }
        case 186: break;
        case 71: 
          { return new Symbol(sym.False, yychar, yyline, yytext());
          }
        case 187: break;
        case 18: 
          { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
          }
        case 188: break;
        case 79: 
          { return new Symbol(sym.Object, yychar, yyline, yytext());
          }
        case 189: break;
        case 14: 
          { return new Symbol(sym.Negacion, yychar, yyline, yytext());
          }
        case 190: break;
        case 25: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 191: break;
        case 20: 
          { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
          }
        case 192: break;
        case 55: 
          { return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 193: break;
        case 23: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 194: break;
        case 63: 
          { return new Symbol(sym.Void, yychar, yyline, yytext());
          }
        case 195: break;
        case 61: 
          { return new Symbol(sym.Uint, yychar, yyline, yytext());
          }
        case 196: break;
        case 82: 
          { return new Symbol(sym.Sizeof, yychar, yyline, yytext());
          }
        case 197: break;
        case 34: 
          { return new Symbol(sym.Decremento_unitario, yychar, yyline, yytext());
          }
        case 198: break;
        case 104: 
          { return new Symbol(sym.Operator, yychar, yyline, yytext());
          }
        case 199: break;
        case 41: 
          { return new Symbol(sym.Menor_o_igual_que, yychar, yyline, yytext());
          }
        case 200: break;
        case 29: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 201: break;
        case 98: 
          { return new Symbol(sym.Implicit, yychar, yyline, yytext());
          }
        case 202: break;
        case 24: 
          { return new Symbol(sym.In, yychar, yyline, yytext());
          }
        case 203: break;
        case 5: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 204: break;
        case 60: 
          { return new Symbol(sym.Goto, yychar, yyline, yytext());
          }
        case 205: break;
        case 10: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 206: break;
        case 70: 
          { return new Symbol(sym.Fixed, yychar, yyline, yytext());
          }
        case 207: break;
        case 66: 
          { return new Symbol(sym.Event, yychar, yyline, yytext());
          }
        case 208: break;
        case 102: 
          { return new Symbol(sym.Readonly, yychar, yyline, yytext());
          }
        case 209: break;
        case 87: 
          { return new Symbol(sym.Params, yychar, yyline, yytext());
          }
        case 210: break;
        case 109: 
          { return new Symbol(sym.Unchecked, yychar, yyline, yytext());
          }
        case 211: break;
        case 33: 
          { return new Symbol(sym.Asignacion_resta, yychar, yyline, yytext());
          }
        case 212: break;
        case 69: 
          { return new Symbol(sym.Const, yychar, yyline, yytext());
          }
        case 213: break;
        case 92: 
          { return new Symbol(sym.Foreach, yychar, yyline, yytext());
          }
        case 214: break;
        case 78: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 215: break;
        case 75: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 216: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 217: break;
        case 48: 
          { return new Symbol(sym.Out, yychar, yyline, yytext());
          }
        case 218: break;
        case 88: 
          { return new Symbol(sym.Printf, yychar, yyline, yytext());
          }
        case 219: break;
        case 7: 
          { return new Symbol(sym.Dos_puntos, yychar, yyline, yytext());
          }
        case 220: break;
        case 38: 
          { return new Symbol(sym.Diferente_de, yychar, yyline, yytext());
          }
        case 221: break;
        case 46: 
          { return new Symbol(sym.Try, yychar, yyline, yytext());
          }
        case 222: break;
        case 36: 
          { return new Symbol(sym.Y_Logico, yychar, yyline, yytext());
          }
        case 223: break;
        case 21: 
          { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
          }
        case 224: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
