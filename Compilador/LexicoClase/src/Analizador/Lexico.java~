/* The following code was generated by JFlex 1.4.3 on 11/08/20 04:10 PM */

package Analizador;
import static Analizador.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/08/20 04:10 PM from the specification file
 * <tt>../LexicoClase/src/Analizador/Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\10\2\0\1\3\22\0\1\3\1\50\1\11\1\63"+
    "\1\0\1\53\1\46\1\0\1\54\1\55\1\45\1\43\1\3\1\44"+
    "\1\64\1\7\12\2\1\41\1\62\1\52\1\42\1\51\2\0\22\1"+
    "\1\30\7\1\1\60\1\0\1\61\1\0\1\1\1\0\1\17\1\12"+
    "\1\15\1\25\1\14\1\24\1\23\1\16\1\4\1\37\1\31\1\21"+
    "\1\32\1\5\1\22\1\35\1\1\1\20\1\27\1\6\1\26\1\33"+
    "\1\36\1\34\1\13\1\40\1\56\1\47\1\57\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\2\1\5\1\6"+
    "\1\7\21\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\7\2\1\4\1\36\15\2\1\37\14\2\1\40"+
    "\22\2\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\0"+
    "\1\57\1\2\1\60\5\2\1\61\23\2\1\62\3\2"+
    "\1\63\7\2\1\64\32\2\1\0\3\2\1\65\1\2"+
    "\1\66\1\2\1\67\1\70\1\71\1\2\1\72\1\73"+
    "\1\74\5\2\1\75\6\2\1\76\3\2\1\77\10\2"+
    "\1\100\15\2\1\101\1\2\1\102\7\2\1\3\4\2"+
    "\1\103\1\104\1\2\1\105\3\2\1\106\1\107\1\2"+
    "\1\110\7\2\1\111\1\112\5\2\1\113\1\114\5\2"+
    "\1\115\12\2\1\116\4\2\1\117\1\2\1\120\4\2"+
    "\1\121\1\2\1\122\7\2\1\123\1\124\1\125\2\2"+
    "\1\126\1\127\1\130\1\131\2\2\1\132\1\133\2\2"+
    "\1\134\5\2\1\135\5\2\1\136\1\137\1\140\2\2"+
    "\1\141\1\2\1\142\1\2\1\143\1\2\1\144\1\2"+
    "\1\145\1\2\1\146\1\147\1\150\1\151\1\152\1\153"+
    "\1\154\2\2\1\155\1\2\1\156\1\157\1\160\1\2"+
    "\1\161\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\65\0\65\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\65\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u07a9\0\152\0\152\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\65\0\u0986\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\152\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\u12a2"+
    "\0\u12d7\0\u130c\0\152\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415"+
    "\0\152\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u1765\0\u179a\0\u17cf\0\u1804\0\152\0\u1839\0\u186e\0\u18a3"+
    "\0\152\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e"+
    "\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\152"+
    "\0\u20b6\0\152\0\u20eb\0\152\0\152\0\152\0\u2120\0\u2155"+
    "\0\152\0\152\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\152"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\152\0\u23d1"+
    "\0\u2406\0\u243b\0\152\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544"+
    "\0\u2579\0\u25ae\0\u25e3\0\152\0\u2618\0\u264d\0\u2682\0\u26b7"+
    "\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\152\0\u28c9\0\152\0\u28fe\0\u2933\0\u2968\0\u299d"+
    "\0\u29d2\0\u2a07\0\u2a3c\0\65\0\u2a71\0\u2aa6\0\u2adb\0\u2b10"+
    "\0\152\0\152\0\u2b45\0\152\0\u2b7a\0\u2baf\0\u2be4\0\152"+
    "\0\152\0\u2c19\0\152\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22"+
    "\0\u2d57\0\u2d8c\0\152\0\152\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60"+
    "\0\u2e95\0\152\0\152\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e"+
    "\0\152\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111"+
    "\0\u3146\0\u317b\0\u31b0\0\152\0\u31e5\0\u321a\0\u324f\0\u3284"+
    "\0\152\0\u32b9\0\152\0\u32ee\0\u3323\0\u3358\0\u338d\0\152"+
    "\0\u33c2\0\152\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500"+
    "\0\u3535\0\152\0\152\0\152\0\u356a\0\u359f\0\152\0\152"+
    "\0\152\0\152\0\u35d4\0\u3609\0\152\0\152\0\u363e\0\u3673"+
    "\0\152\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\152\0\u37b1"+
    "\0\u37e6\0\u381b\0\u3850\0\u3885\0\152\0\152\0\152\0\u38ba"+
    "\0\u38ef\0\152\0\u3924\0\152\0\u3959\0\152\0\u398e\0\152"+
    "\0\u39c3\0\152\0\u39f8\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\u3a2d\0\u3a62\0\152\0\u3a97\0\152\0\152"+
    "\0\152\0\u3acc\0\152\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\3\1\15\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\3\1\33\1\34\2\3"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\66\0\2\3\1\0\3\3"+
    "\3\0\27\3\26\0\1\4\65\0\1\5\62\0\2\3"+
    "\1\0\1\3\1\61\1\3\3\0\12\3\1\62\2\3"+
    "\1\63\2\3\1\64\6\3\25\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\65\2\3\1\66\6\3\1\67\12\3"+
    "\25\0\2\3\1\0\3\3\3\0\1\3\1\70\2\3"+
    "\1\71\1\3\1\72\20\3\33\0\1\73\32\0\1\74"+
    "\23\0\2\3\1\0\3\3\3\0\1\3\1\75\3\3"+
    "\1\76\1\77\1\3\1\100\16\3\25\0\2\3\1\0"+
    "\1\3\1\101\1\3\3\0\7\3\1\102\11\3\1\103"+
    "\1\104\4\3\25\0\2\3\1\0\3\3\3\0\4\3"+
    "\1\105\1\106\1\3\1\107\1\110\16\3\25\0\2\3"+
    "\1\0\3\3\3\0\1\111\14\3\1\112\11\3\25\0"+
    "\2\3\1\0\3\3\3\0\2\3\1\113\24\3\25\0"+
    "\2\3\1\0\3\3\3\0\10\3\1\114\16\3\25\0"+
    "\2\3\1\0\3\3\3\0\1\115\13\3\1\116\4\3"+
    "\1\117\1\3\1\120\3\3\25\0\2\3\1\0\3\3"+
    "\3\0\10\3\1\121\16\3\25\0\2\3\1\0\1\122"+
    "\2\3\3\0\5\3\1\123\1\3\1\124\1\125\16\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\126\5\3"+
    "\1\127\16\3\25\0\2\3\1\0\1\130\1\131\1\3"+
    "\3\0\7\3\1\132\5\3\1\133\11\3\25\0\2\3"+
    "\1\0\1\134\1\3\1\135\3\0\1\136\1\3\1\137"+
    "\1\3\1\140\17\3\1\141\2\3\25\0\2\3\1\0"+
    "\2\3\1\142\3\0\27\3\25\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\143\21\3\25\0\2\3\1\0\1\144"+
    "\2\3\3\0\10\3\1\145\16\3\25\0\2\3\1\0"+
    "\3\3\3\0\5\3\1\146\1\147\5\3\1\150\12\3"+
    "\25\0\2\3\1\0\3\3\3\0\4\3\1\151\22\3"+
    "\66\0\1\152\64\0\1\153\1\154\63\0\1\155\1\0"+
    "\1\156\62\0\1\157\70\0\1\160\65\0\1\161\57\0"+
    "\1\162\64\0\1\163\6\0\1\164\55\0\1\165\7\0"+
    "\1\166\54\0\1\167\66\0\1\170\21\0\2\3\1\0"+
    "\2\3\1\171\3\0\27\3\25\0\2\3\1\0\3\3"+
    "\3\0\23\3\1\172\3\3\25\0\2\3\1\0\3\3"+
    "\3\0\24\3\1\173\2\3\25\0\2\3\1\0\3\3"+
    "\3\0\20\3\1\174\6\3\25\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\175\17\3\25\0\2\3\1\0\3\3"+
    "\3\0\23\3\1\176\3\3\25\0\2\3\1\0\1\177"+
    "\2\3\3\0\6\3\1\200\20\3\25\0\2\3\1\0"+
    "\3\3\3\0\1\3\1\201\12\3\1\202\12\3\24\0"+
    "\10\73\1\0\54\73\1\0\2\3\1\0\2\3\1\203"+
    "\3\0\27\3\25\0\2\3\1\0\3\3\3\0\15\3"+
    "\1\204\11\3\25\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\205\24\3\25\0\2\3\1\0\3\3\3\0\10\3"+
    "\1\206\16\3\25\0\2\3\1\0\3\3\3\0\14\3"+
    "\1\207\12\3\25\0\2\3\1\0\3\3\3\0\15\3"+
    "\1\210\11\3\25\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\211\24\3\25\0\2\3\1\0\2\3\1\212\3\0"+
    "\23\3\1\213\3\3\25\0\2\3\1\0\3\3\3\0"+
    "\2\3\1\214\2\3\1\215\21\3\25\0\2\3\1\0"+
    "\2\3\1\216\3\0\15\3\1\217\11\3\25\0\2\3"+
    "\1\0\3\3\3\0\5\3\1\220\21\3\25\0\2\3"+
    "\1\0\1\3\1\221\1\3\3\0\27\3\25\0\2\3"+
    "\1\0\3\3\3\0\15\3\1\222\11\3\25\0\2\3"+
    "\1\0\2\3\1\223\3\0\5\3\1\224\4\3\1\225"+
    "\14\3\25\0\2\3\1\0\1\3\1\226\1\3\3\0"+
    "\3\3\1\227\23\3\25\0\2\3\1\0\3\3\3\0"+
    "\25\3\1\230\1\3\25\0\2\3\1\0\2\3\1\231"+
    "\3\0\27\3\25\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\232\24\3\25\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\233\24\3\25\0\2\3\1\0\2\3\1\234\3\0"+
    "\27\3\25\0\2\3\1\0\1\3\1\235\1\3\3\0"+
    "\22\3\1\236\4\3\25\0\2\3\1\0\3\3\3\0"+
    "\7\3\1\237\17\3\25\0\2\3\1\0\3\3\3\0"+
    "\10\3\1\240\16\3\25\0\2\3\1\0\3\3\3\0"+
    "\6\3\1\241\20\3\25\0\2\3\1\0\3\3\3\0"+
    "\3\3\1\242\3\3\1\243\17\3\25\0\2\3\1\0"+
    "\3\3\3\0\14\3\1\244\12\3\25\0\2\3\1\0"+
    "\1\3\1\245\1\3\3\0\27\3\25\0\2\3\1\0"+
    "\3\3\3\0\3\3\1\246\11\3\1\247\11\3\25\0"+
    "\2\3\1\0\3\3\3\0\10\3\1\250\16\3\25\0"+
    "\2\3\1\0\1\251\2\3\3\0\4\3\1\252\22\3"+
    "\25\0\2\3\1\0\3\3\3\0\26\3\1\253\25\0"+
    "\2\3\1\0\3\3\3\0\5\3\1\254\1\255\20\3"+
    "\25\0\2\3\1\0\3\3\3\0\1\3\1\256\25\3"+
    "\25\0\2\3\1\0\3\3\3\0\5\3\1\257\21\3"+
    "\25\0\2\3\1\0\3\3\3\0\10\3\1\260\16\3"+
    "\25\0\2\3\1\0\1\261\2\3\3\0\27\3\25\0"+
    "\2\3\1\0\3\3\3\0\6\3\1\262\20\3\25\0"+
    "\2\3\1\0\1\263\2\3\3\0\27\3\25\0\2\3"+
    "\1\0\3\3\3\0\6\3\1\264\20\3\25\0\2\3"+
    "\1\0\1\265\2\3\3\0\7\3\1\266\17\3\25\0"+
    "\2\3\1\0\3\3\3\0\6\3\1\267\20\3\25\0"+
    "\2\3\1\0\1\270\2\3\3\0\10\3\1\271\16\3"+
    "\25\0\2\3\1\0\3\3\3\0\1\272\26\3\25\0"+
    "\2\3\1\0\1\273\2\3\3\0\27\3\26\0\1\274"+
    "\63\0\2\3\1\0\3\3\3\0\2\3\1\275\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\7\3\1\276\17\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\277\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\7\3\1\300\17\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\301\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\15\3\1\302\11\3"+
    "\25\0\2\3\1\0\3\3\3\0\10\3\1\303\16\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\304\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\305\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\306\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\5\3\1\307\21\3"+
    "\25\0\2\3\1\0\3\3\3\0\7\3\1\310\17\3"+
    "\25\0\2\3\1\0\3\3\3\0\20\3\1\311\6\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\312\24\3"+
    "\25\0\2\3\1\0\1\3\1\313\1\3\3\0\27\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\314\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\7\3\1\315\17\3"+
    "\25\0\2\3\1\0\3\3\3\0\3\3\1\316\23\3"+
    "\25\0\2\3\1\0\3\3\3\0\6\3\1\305\20\3"+
    "\25\0\2\3\1\0\3\3\3\0\3\3\1\317\23\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\320\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\15\3\1\321\11\3"+
    "\25\0\2\3\1\0\2\3\1\322\3\0\15\3\1\323"+
    "\11\3\25\0\2\3\1\0\2\3\1\324\3\0\27\3"+
    "\25\0\2\3\1\0\3\3\3\0\14\3\1\325\12\3"+
    "\25\0\2\3\1\0\3\3\3\0\13\3\1\326\13\3"+
    "\25\0\2\3\1\0\3\3\3\0\11\3\1\305\15\3"+
    "\25\0\2\3\1\0\3\3\3\0\17\3\1\327\7\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\330\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\6\3\1\331\20\3"+
    "\25\0\2\3\1\0\3\3\3\0\6\3\1\332\20\3"+
    "\25\0\2\3\1\0\3\3\3\0\10\3\1\333\16\3"+
    "\25\0\2\3\1\0\3\3\3\0\5\3\1\334\21\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\335\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\15\3\1\336\11\3"+
    "\25\0\2\3\1\0\3\3\3\0\5\3\1\337\21\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\340\24\3"+
    "\25\0\2\3\1\0\1\341\2\3\3\0\27\3\25\0"+
    "\2\3\1\0\3\3\3\0\2\3\1\342\24\3\25\0"+
    "\2\3\1\0\3\3\3\0\1\343\26\3\25\0\2\3"+
    "\1\0\2\3\1\344\3\0\27\3\25\0\2\3\1\0"+
    "\3\3\3\0\4\3\1\345\22\3\25\0\2\3\1\0"+
    "\3\3\3\0\5\3\1\346\21\3\25\0\2\3\1\0"+
    "\1\3\1\347\1\3\3\0\27\3\25\0\2\3\1\0"+
    "\1\3\1\350\1\3\3\0\27\3\25\0\2\3\1\0"+
    "\3\3\3\0\10\3\1\351\16\3\25\0\2\3\1\0"+
    "\3\3\3\0\2\3\1\352\24\3\25\0\2\3\1\0"+
    "\2\3\1\353\3\0\3\3\1\354\23\3\25\0\2\3"+
    "\1\0\3\3\3\0\14\3\1\355\12\3\25\0\2\3"+
    "\1\0\2\3\1\356\3\0\27\3\25\0\2\3\1\0"+
    "\3\3\3\0\7\3\1\357\17\3\25\0\2\3\1\0"+
    "\3\3\3\0\6\3\1\337\20\3\25\0\2\3\1\0"+
    "\2\3\1\360\3\0\27\3\25\0\2\3\1\0\1\361"+
    "\2\3\3\0\27\3\25\0\2\3\1\0\1\3\1\362"+
    "\1\3\3\0\27\3\25\0\2\3\1\0\2\3\1\363"+
    "\3\0\27\3\25\0\2\3\1\0\3\3\3\0\13\3"+
    "\1\364\13\3\25\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\365\21\3\25\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\366\21\3\25\0\2\3\1\0\1\3\1\367\1\3"+
    "\3\0\21\3\1\370\5\3\25\0\2\3\1\0\2\3"+
    "\1\371\3\0\27\3\25\0\2\3\1\0\3\3\3\0"+
    "\7\3\1\372\17\3\25\0\2\3\1\0\3\3\3\0"+
    "\7\3\1\373\17\3\26\0\1\274\52\0\1\374\10\0"+
    "\2\3\1\0\3\3\3\0\6\3\1\375\20\3\25\0"+
    "\2\3\1\0\1\376\2\3\3\0\27\3\25\0\2\3"+
    "\1\0\3\3\3\0\15\3\1\377\11\3\25\0\2\3"+
    "\1\0\3\3\3\0\10\3\1\u0100\16\3\25\0\2\3"+
    "\1\0\3\3\3\0\24\3\1\u0101\2\3\25\0\2\3"+
    "\1\0\3\3\3\0\17\3\1\u0102\7\3\25\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u0103\24\3\25\0\2\3"+
    "\1\0\2\3\1\u0104\3\0\27\3\25\0\2\3\1\0"+
    "\3\3\3\0\6\3\1\u0105\20\3\25\0\2\3\1\0"+
    "\1\u0106\2\3\3\0\27\3\25\0\2\3\1\0\3\3"+
    "\3\0\17\3\1\u0107\7\3\25\0\2\3\1\0\3\3"+
    "\3\0\4\3\1\u0108\22\3\25\0\2\3\1\0\3\3"+
    "\3\0\15\3\1\u0109\11\3\25\0\2\3\1\0\1\u010a"+
    "\2\3\3\0\27\3\25\0\2\3\1\0\2\3\1\u010b"+
    "\3\0\27\3\25\0\2\3\1\0\3\3\3\0\6\3"+
    "\1\u010c\20\3\25\0\2\3\1\0\3\3\3\0\6\3"+
    "\1\u010d\20\3\25\0\2\3\1\0\3\3\3\0\10\3"+
    "\1\u010e\16\3\25\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\u010f\23\3\25\0\2\3\1\0\3\3\3\0\6\3"+
    "\1\u0110\20\3\25\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\u0111\21\3\25\0\2\3\1\0\3\3\3\0\7\3"+
    "\1\u0112\17\3\25\0\2\3\1\0\3\3\3\0\13\3"+
    "\1\u0113\13\3\25\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u0114\24\3\25\0\2\3\1\0\2\3\1\305\3\0"+
    "\27\3\25\0\2\3\1\0\3\3\3\0\5\3\1\u0115"+
    "\21\3\25\0\2\3\1\0\3\3\3\0\20\3\1\u0116"+
    "\6\3\25\0\2\3\1\0\3\3\3\0\11\3\1\u0117"+
    "\15\3\25\0\2\3\1\0\3\3\3\0\7\3\1\203"+
    "\17\3\25\0\2\3\1\0\3\3\3\0\2\3\1\u0118"+
    "\24\3\25\0\2\3\1\0\3\3\3\0\12\3\1\u0119"+
    "\14\3\25\0\2\3\1\0\3\3\3\0\11\3\1\u011a"+
    "\15\3\25\0\2\3\1\0\3\3\3\0\11\3\1\u011b"+
    "\15\3\25\0\2\3\1\0\3\3\3\0\6\3\1\u011c"+
    "\20\3\25\0\2\3\1\0\3\3\3\0\10\3\1\u011d"+
    "\16\3\25\0\2\3\1\0\1\u011e\2\3\3\0\27\3"+
    "\25\0\2\3\1\0\3\3\3\0\17\3\1\u011f\7\3"+
    "\25\0\2\3\1\0\3\3\3\0\3\3\1\u0120\23\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0121\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0122\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\3\3\1\u0123\23\3"+
    "\25\0\2\3\1\0\1\3\1\u0124\1\3\3\0\27\3"+
    "\25\0\2\3\1\0\3\3\3\0\14\3\1\u0125\12\3"+
    "\25\0\2\3\1\0\2\3\1\u0126\3\0\27\3\25\0"+
    "\2\3\1\0\3\3\3\0\20\3\1\u0127\6\3\25\0"+
    "\2\3\1\0\2\3\1\u0128\3\0\27\3\25\0\2\3"+
    "\1\0\3\3\3\0\5\3\1\u0129\21\3\25\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u012a\24\3\25\0\2\3"+
    "\1\0\1\u012b\2\3\3\0\27\3\25\0\2\3\1\0"+
    "\3\3\3\0\2\3\1\u012c\24\3\25\0\2\3\1\0"+
    "\1\3\1\u012d\1\3\3\0\12\3\1\u012e\14\3\25\0"+
    "\2\3\1\0\3\3\3\0\3\3\1\u012f\23\3\25\0"+
    "\2\3\1\0\3\3\3\0\23\3\1\u0130\3\3\25\0"+
    "\2\3\1\0\3\3\3\0\12\3\1\u0131\14\3\25\0"+
    "\2\3\1\0\3\3\3\0\5\3\1\u0132\21\3\25\0"+
    "\2\3\1\0\1\3\1\u0133\1\3\3\0\27\3\25\0"+
    "\2\3\1\0\3\3\3\0\3\3\1\u0134\23\3\25\0"+
    "\2\3\1\0\3\3\3\0\2\3\1\u0135\24\3\25\0"+
    "\2\3\1\0\1\3\1\u0136\1\3\3\0\27\3\25\0"+
    "\2\3\1\0\3\3\3\0\5\3\1\u0137\21\3\25\0"+
    "\2\3\1\0\1\3\1\u0138\1\3\3\0\27\3\25\0"+
    "\2\3\1\0\1\3\1\u0139\1\3\3\0\27\3\25\0"+
    "\2\3\1\0\2\3\1\u013a\3\0\27\3\25\0\2\3"+
    "\1\0\1\u013b\2\3\3\0\27\3\25\0\2\3\1\0"+
    "\2\3\1\u013c\3\0\27\3\25\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\u013d\17\3\25\0\2\3\1\0\3\3"+
    "\3\0\3\3\1\u013e\23\3\25\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\u013f\21\3\25\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\u0140\21\3\25\0\2\3\1\0\3\3"+
    "\3\0\3\3\1\u0141\23\3\25\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0142\24\3\25\0\2\3\1\0\2\3"+
    "\1\u0143\3\0\27\3\25\0\2\3\1\0\3\3\3\0"+
    "\12\3\1\u0144\14\3\25\0\2\3\1\0\3\3\3\0"+
    "\3\3\1\u0145\23\3\25\0\2\3\1\0\3\3\3\0"+
    "\5\3\1\u0146\21\3\25\0\2\3\1\0\2\3\1\u0147"+
    "\3\0\27\3\25\0\2\3\1\0\3\3\3\0\13\3"+
    "\1\u0148\13\3\25\0\2\3\1\0\3\3\3\0\4\3"+
    "\1\u0149\22\3\25\0\2\3\1\0\3\3\3\0\11\3"+
    "\1\u014a\15\3\25\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\u014b\21\3\25\0\2\3\1\0\1\u014c\2\3\3\0"+
    "\27\3\25\0\2\3\1\0\3\3\3\0\15\3\1\u014d"+
    "\11\3\25\0\2\3\1\0\3\3\3\0\12\3\1\u014e"+
    "\14\3\25\0\2\3\1\0\2\3\1\u014f\3\0\27\3"+
    "\25\0\2\3\1\0\3\3\3\0\3\3\1\u0150\23\3"+
    "\25\0\2\3\1\0\3\3\3\0\3\3\1\u0151\23\3"+
    "\25\0\2\3\1\0\3\3\3\0\5\3\1\u0152\21\3"+
    "\25\0\2\3\1\0\3\3\3\0\5\3\1\u0153\21\3"+
    "\25\0\2\3\1\0\1\u0154\2\3\3\0\27\3\25\0"+
    "\2\3\1\0\3\3\3\0\5\3\1\u0155\21\3\25\0"+
    "\2\3\1\0\1\3\1\305\1\3\3\0\27\3\25\0"+
    "\2\3\1\0\1\u0156\2\3\3\0\27\3\25\0\2\3"+
    "\1\0\3\3\3\0\13\3\1\u0157\13\3\25\0\2\3"+
    "\1\0\3\3\3\0\14\3\1\u0158\12\3\25\0\2\3"+
    "\1\0\3\3\3\0\3\3\1\u0159\23\3\25\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u015a\17\3\25\0\2\3"+
    "\1\0\3\3\3\0\13\3\1\u015b\13\3\25\0\2\3"+
    "\1\0\3\3\3\0\10\3\1\u015c\16\3\25\0\2\3"+
    "\1\0\3\3\3\0\1\3\1\u015d\25\3\25\0\2\3"+
    "\1\0\3\3\3\0\4\3\1\u015e\22\3\25\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u015f\17\3\25\0\2\3"+
    "\1\0\2\3\1\u0160\3\0\27\3\25\0\2\3\1\0"+
    "\3\3\3\0\17\3\1\u0161\7\3\25\0\2\3\1\0"+
    "\2\3\1\u0162\3\0\27\3\25\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\u0163\17\3\25\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\u0164\17\3\25\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\u0165\17\3\25\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0166\24\3\25\0\2\3\1\0\2\3"+
    "\1\u0167\3\0\27\3\25\0\2\3\1\0\3\3\3\0"+
    "\7\3\1\u0168\17\3\25\0\2\3\1\0\3\3\3\0"+
    "\3\3\1\u0169\23\3\25\0\2\3\1\0\2\3\1\u016a"+
    "\3\0\27\3\25\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\u016b\23\3\25\0\2\3\1\0\2\3\1\u016c\3\0"+
    "\27\3\25\0\2\3\1\0\3\3\3\0\2\3\1\u016d"+
    "\24\3\25\0\2\3\1\0\2\3\1\u016e\3\0\27\3"+
    "\25\0\2\3\1\0\3\3\3\0\1\3\1\u016f\25\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0170\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\6\3\1\u0171\20\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0172\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0173\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\7\3\1\u0174\17\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0175\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0176\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0177\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\2\3\1\u0178\24\3"+
    "\25\0\2\3\1\0\3\3\3\0\13\3\1\u0179\13\3"+
    "\25\0\2\3\1\0\3\3\3\0\10\3\1\u017a\16\3"+
    "\25\0\2\3\1\0\3\3\3\0\13\3\1\u017b\13\3"+
    "\25\0\2\3\1\0\3\3\3\0\3\3\1\u017c\23\3"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15105];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\21\1\1\11\13\1\10\11"+
    "\13\1\1\11\55\1\16\11\1\0\103\1\1\0\77\1"+
    "\1\11\200\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexemas;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { lexemas=yytext(); return Mayor_que;
          }
        case 115: break;
        case 8: 
          { lexemas=yytext(); return Dos_puntos;
          }
        case 116: break;
        case 86: 
          { lexemas=yytext(); return Struct;
          }
        case 117: break;
        case 18: 
          { lexemas=yytext(); return Parentesis_a;
          }
        case 118: break;
        case 21: 
          { lexemas=yytext(); return Llave_c;
          }
        case 119: break;
        case 46: 
          { lexemas=yytext(); return Asignacion_modulo;
          }
        case 120: break;
        case 92: 
          { lexemas=yytext(); return Public;
          }
        case 121: break;
        case 82: 
          { lexemas=yytext(); return Object;
          }
        case 122: break;
        case 81: 
          { lexemas=yytext(); return Return;
          }
        case 123: break;
        case 10: 
          { lexemas=yytext(); return Suma;
          }
        case 124: break;
        case 105: 
          { lexemas=yytext(); return Readonly;
          }
        case 125: break;
        case 33: 
          { lexemas=yytext(); return Igual_a;
          }
        case 126: break;
        case 70: 
          { lexemas=yytext(); return Catch;
          }
        case 127: break;
        case 37: 
          { lexemas=yytext(); return Decremento_unitario;
          }
        case 128: break;
        case 52: 
          { lexemas=yytext(); return For;
          }
        case 129: break;
        case 104: 
          { lexemas=yytext(); return Abstract;
          }
        case 130: break;
        case 88: 
          { lexemas=yytext(); return Switch;
          }
        case 131: break;
        case 42: 
          { lexemas=yytext(); return Mayor_o_igual_que;
          }
        case 132: break;
        case 102: 
          { lexemas=yytext(); return Explicit;
          }
        case 133: break;
        case 41: 
          { lexemas=yytext(); return Diferente_de;
          }
        case 134: break;
        case 107: 
          { lexemas=yytext(); return Operator;
          }
        case 135: break;
        case 11: 
          { lexemas=yytext(); return Resta;
          }
        case 136: break;
        case 7: 
          { lexemas=yytext(); return Comillas;
          }
        case 137: break;
        case 13: 
          { lexemas=yytext(); return Y_Logico_Bit;
          }
        case 138: break;
        case 98: 
          { lexemas=yytext(); return Virtual;
          }
        case 139: break;
        case 87: 
          { lexemas=yytext(); return Sealed;
          }
        case 140: break;
        case 29: 
          { lexemas=yytext(); return Is;
          }
        case 141: break;
        case 5: 
          { lexemas=yytext(); return Division;
          }
        case 142: break;
        case 25: 
          { lexemas=yytext(); return Numeral;
          }
        case 143: break;
        case 74: 
          { lexemas=yytext(); return False;
          }
        case 144: break;
        case 9: 
          { lexemas=yytext(); return Igual;
          }
        case 145: break;
        case 71: 
          { lexemas=yytext(); return Class;
          }
        case 146: break;
        case 12: 
          { lexemas=yytext(); return Multiplicacion;
          }
        case 147: break;
        case 30: 
          { lexemas=yytext(); return Asignacion_division;
          }
        case 148: break;
        case 49: 
          { lexemas=yytext(); return Try;
          }
        case 149: break;
        case 53: 
          { lexemas=yytext(); return Null;
          }
        case 150: break;
        case 4: 
          { /*Ignore*/
          }
        case 151: break;
        case 64: 
          { lexemas=yytext(); return Uint;
          }
        case 152: break;
        case 58: 
          { lexemas=yytext(); return Bool;
          }
        case 153: break;
        case 39: 
          { lexemas=yytext(); return Y_Logico;
          }
        case 154: break;
        case 45: 
          { lexemas=yytext(); return Desplazar_a_izquierda;
          }
        case 155: break;
        case 85: 
          { lexemas=yytext(); return Sizeof;
          }
        case 156: break;
        case 36: 
          { lexemas=yytext(); return Asignacion_resta;
          }
        case 157: break;
        case 34: 
          { lexemas=yytext(); return Asignacion_suma;
          }
        case 158: break;
        case 28: 
          { lexemas=yytext(); return If;
          }
        case 159: break;
        case 110: 
          { lexemas=yytext(); return Interface;
          }
        case 160: break;
        case 43: 
          { lexemas=yytext(); return Desplazar_a_derecha;
          }
        case 161: break;
        case 23: 
          { lexemas = yytext(); return Corchete_c;
          }
        case 162: break;
        case 59: 
          { lexemas=yytext(); return Enum;
          }
        case 163: break;
        case 83: 
          { lexemas=yytext(); return Unsafe;
          }
        case 164: break;
        case 44: 
          { lexemas=yytext(); return Menor_o_igual_que;
          }
        case 165: break;
        case 20: 
          { lexemas=yytext(); return Llave_a;
          }
        case 166: break;
        case 77: 
          { lexemas=yytext(); return Sbyte;
          }
        case 167: break;
        case 109: 
          { lexemas=yytext(); return Volatile;
          }
        case 168: break;
        case 75: 
          { lexemas=yytext(); return Ulong;
          }
        case 169: break;
        case 1: 
          { return ERROR;
          }
        case 170: break;
        case 26: 
          { lexemas=yytext(); return Punto;
          }
        case 171: break;
        case 79: 
          { lexemas=yytext(); return Typeof;
          }
        case 172: break;
        case 31: 
          { lexemas=yytext(); return As;
          }
        case 173: break;
        case 67: 
          { lexemas=yytext(); return Throw;
          }
        case 174: break;
        case 114: 
          { lexemas=yytext(); return Stackalloc;
          }
        case 175: break;
        case 95: 
          { lexemas=yytext(); return Foreach;
          }
        case 176: break;
        case 15: 
          { lexemas=yytext(); return Negacion;
          }
        case 177: break;
        case 97: 
          { lexemas=yytext(); return Statict;
          }
        case 178: break;
        case 91: 
          { lexemas=yytext(); return Printf;
          }
        case 179: break;
        case 93: 
          { lexemas=yytext(); return Checked;
          }
        case 180: break;
        case 73: 
          { lexemas=yytext(); return Fixed;
          }
        case 181: break;
        case 60: 
          { lexemas=yytext(); return Else;
          }
        case 182: break;
        case 40: 
          { lexemas=yytext(); return O_Logico;
          }
        case 183: break;
        case 22: 
          { lexemas = yytext(); return Corchete_a;
          }
        case 184: break;
        case 69: 
          { lexemas=yytext(); return Event;
          }
        case 185: break;
        case 63: 
          { lexemas=yytext(); return Goto;
          }
        case 186: break;
        case 65: 
          { lexemas=yytext(); return Main;
          }
        case 187: break;
        case 35: 
          { lexemas=yytext(); return Incremento_unitario;
          }
        case 188: break;
        case 100: 
          { lexemas=yytext(); return Internal;
          }
        case 189: break;
        case 2: 
          { lexemas=yytext(); return Identificador;
          }
        case 190: break;
        case 24: 
          { lexemas=yytext(); return P_coma;
          }
        case 191: break;
        case 50: 
          { lexemas=yytext(); return Ref;
          }
        case 192: break;
        case 78: 
          { lexemas=yytext(); return While;
          }
        case 193: break;
        case 61: 
          { lexemas=yytext(); return Case;
          }
        case 194: break;
        case 19: 
          { lexemas=yytext(); return Parentesis_c;
          }
        case 195: break;
        case 16: 
          { lexemas=yytext(); return Menor_que;
          }
        case 196: break;
        case 54: 
          { lexemas=yytext(); return This;
          }
        case 197: break;
        case 84: 
          { lexemas=yytext(); return Ushort;
          }
        case 198: break;
        case 6: 
          { return Linea;
          }
        case 199: break;
        case 48: 
          { lexemas=yytext(); return New;
          }
        case 200: break;
        case 72: 
          { lexemas=yytext(); return Const;
          }
        case 201: break;
        case 51: 
          { lexemas=yytext(); return Out;
          }
        case 202: break;
        case 111: 
          { lexemas=yytext(); return Namespace;
          }
        case 203: break;
        case 90: 
          { lexemas=yytext(); return Params;
          }
        case 204: break;
        case 106: 
          { lexemas=yytext(); return Override;
          }
        case 205: break;
        case 55: 
          { lexemas=yytext(); return True;
          }
        case 206: break;
        case 80: 
          { lexemas=yytext(); return Extern;
          }
        case 207: break;
        case 47: 
          { lexemas=yytext(); return Int;
          }
        case 208: break;
        case 57: 
          { lexemas=yytext(); return Base;
          }
        case 209: break;
        case 68: 
          { lexemas=yytext(); return Break;
          }
        case 210: break;
        case 108: 
          { lexemas=yytext(); return Delegate;
          }
        case 211: break;
        case 89: 
          { lexemas=yytext(); return Cadena;
          }
        case 212: break;
        case 62: 
          { lexemas=yytext(); return Lock;
          }
        case 213: break;
        case 76: 
          { lexemas=yytext(); return Using;
          }
        case 214: break;
        case 3: 
          { lexemas=yytext(); return Numero;
          }
        case 215: break;
        case 101: 
          { lexemas=yytext(); return Implicit;
          }
        case 216: break;
        case 14: 
          { lexemas=yytext(); return O_Logico_Bit;
          }
        case 217: break;
        case 38: 
          { lexemas=yytext(); return Asignacion_multiplicacion;
          }
        case 218: break;
        case 96: 
          { lexemas=yytext(); return Decimal;
          }
        case 219: break;
        case 94: 
          { lexemas=yytext(); return Finally;
          }
        case 220: break;
        case 99: 
          { lexemas=yytext(); return Private;
          }
        case 221: break;
        case 66: 
          { lexemas=yytext(); return Void;
          }
        case 222: break;
        case 112: 
          { lexemas=yytext(); return Unchecked;
          }
        case 223: break;
        case 32: 
          { lexemas=yytext(); return Do;
          }
        case 224: break;
        case 27: 
          { lexemas=yytext(); return In;
          }
        case 225: break;
        case 56: 
          { lexemas=yytext(); return T_dato;
          }
        case 226: break;
        case 113: 
          { lexemas=yytext(); return Protected;
          }
        case 227: break;
        case 103: 
          { lexemas=yytext(); return Continue;
          }
        case 228: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
