/* The following code was generated by JFlex 1.4.3 on 17/06/20 10:53 PM */

package Analizador;
import static Analizador.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/06/20 10:53 PM from the specification file
 * <tt>../LexicoClase/src/Analizador/Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\10\2\0\1\3\22\0\1\3\1\47\1\11\2\0"+
    "\1\52\1\45\1\0\1\53\1\54\1\44\1\42\1\3\1\43\1\62"+
    "\1\7\12\2\1\0\1\61\1\51\1\41\1\50\2\0\22\1\1\30"+
    "\7\1\1\57\1\0\1\60\1\0\1\1\1\0\1\17\1\12\1\15"+
    "\1\25\1\14\1\24\1\23\1\16\1\4\1\37\1\31\1\21\1\32"+
    "\1\5\1\22\1\35\1\1\1\20\1\27\1\6\1\26\1\33\1\36"+
    "\1\34\1\13\1\40\1\55\1\46\1\56\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\2\1\5\1\6"+
    "\1\7\21\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\7\2\1\4"+
    "\1\33\15\2\1\34\14\2\1\35\22\2\1\17\1\36"+
    "\1\37\1\40\1\0\1\41\1\2\1\42\5\2\1\43"+
    "\23\2\1\44\3\2\1\45\7\2\1\46\32\2\1\0"+
    "\3\2\1\47\1\2\1\50\1\2\1\51\1\52\1\53"+
    "\1\2\1\54\1\55\1\56\5\2\1\57\6\2\1\60"+
    "\3\2\1\61\10\2\1\62\15\2\1\63\1\2\1\64"+
    "\7\2\1\3\4\2\1\65\1\66\1\2\1\67\3\2"+
    "\1\70\1\71\1\2\1\72\7\2\1\73\1\74\5\2"+
    "\1\75\1\76\5\2\1\77\12\2\1\100\4\2\1\101"+
    "\1\2\1\102\4\2\1\103\1\2\1\104\7\2\1\105"+
    "\1\106\1\107\2\2\1\110\1\111\1\112\1\113\2\2"+
    "\1\114\1\115\2\2\1\116\5\2\1\117\5\2\1\120"+
    "\1\121\1\122\2\2\1\123\1\2\1\124\1\2\1\125"+
    "\1\2\1\126\1\2\1\127\1\2\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\2\2\1\137\1\2\1\140"+
    "\1\141\1\142\1\2\1\143\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\63\0\63\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u052e\0\u0660\0\u0693\0\u05c7\0\u06c6\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u06f9\0\146"+
    "\0\146\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e"+
    "\0\u0891\0\63\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\146"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0"+
    "\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\63"+
    "\0\63\0\63\0\63\0\u1188\0\u11bb\0\u11ee\0\146\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\146\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\146\0\u16e9\0\u171c\0\u174f\0\146\0\u1782\0\u17b5\0\u17e8"+
    "\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980"+
    "\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\u1e7b\0\u1eae\0\u1ee1\0\146\0\u1f14\0\146\0\u1f47\0\146"+
    "\0\146\0\146\0\u1f7a\0\u1fad\0\146\0\146\0\u1fe0\0\u2013"+
    "\0\u2046\0\u2079\0\u20ac\0\146\0\u20df\0\u2112\0\u2145\0\u2178"+
    "\0\u21ab\0\u21de\0\146\0\u2211\0\u2244\0\u2277\0\146\0\u22aa"+
    "\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\146"+
    "\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7"+
    "\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\146\0\u26d9\0\146"+
    "\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\63"+
    "\0\u2871\0\u28a4\0\u28d7\0\u290a\0\146\0\146\0\u293d\0\146"+
    "\0\u2970\0\u29a3\0\u29d6\0\146\0\146\0\u2a09\0\146\0\u2a3c"+
    "\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\146\0\146"+
    "\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\146\0\146\0\u2ca0"+
    "\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\146\0\u2d9f\0\u2dd2\0\u2e05"+
    "\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\146"+
    "\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\146\0\u3069\0\146\0\u309c"+
    "\0\u30cf\0\u3102\0\u3135\0\146\0\u3168\0\146\0\u319b\0\u31ce"+
    "\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\146\0\146\0\146"+
    "\0\u3300\0\u3333\0\146\0\146\0\146\0\146\0\u3366\0\u3399"+
    "\0\146\0\146\0\u33cc\0\u33ff\0\146\0\u3432\0\u3465\0\u3498"+
    "\0\u34cb\0\u34fe\0\146\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd"+
    "\0\146\0\146\0\146\0\u3630\0\u3663\0\146\0\u3696\0\146"+
    "\0\u36c9\0\146\0\u36fc\0\146\0\u372f\0\146\0\u3762\0\146"+
    "\0\146\0\146\0\146\0\146\0\146\0\146\0\u3795\0\u37c8"+
    "\0\146\0\u37fb\0\146\0\146\0\146\0\u382e\0\146\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\3\1\15\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\3\1\33\1\34\2\3"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\64\0\2\3\1\0\3\3\3\0\27\3"+
    "\24\0\1\4\63\0\1\5\60\0\2\3\1\0\1\3"+
    "\1\57\1\3\3\0\12\3\1\60\2\3\1\61\2\3"+
    "\1\62\6\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\63\2\3\1\64\6\3\1\65\12\3\23\0\2\3"+
    "\1\0\3\3\3\0\1\3\1\66\2\3\1\67\1\3"+
    "\1\70\20\3\31\0\1\71\31\0\1\72\22\0\2\3"+
    "\1\0\3\3\3\0\1\3\1\73\3\3\1\74\1\75"+
    "\1\3\1\76\16\3\23\0\2\3\1\0\1\3\1\77"+
    "\1\3\3\0\7\3\1\100\11\3\1\101\1\102\4\3"+
    "\23\0\2\3\1\0\3\3\3\0\4\3\1\103\1\104"+
    "\1\3\1\105\1\106\16\3\23\0\2\3\1\0\3\3"+
    "\3\0\1\107\14\3\1\110\11\3\23\0\2\3\1\0"+
    "\3\3\3\0\2\3\1\111\24\3\23\0\2\3\1\0"+
    "\3\3\3\0\10\3\1\112\16\3\23\0\2\3\1\0"+
    "\3\3\3\0\1\113\13\3\1\114\4\3\1\115\1\3"+
    "\1\116\3\3\23\0\2\3\1\0\3\3\3\0\10\3"+
    "\1\117\16\3\23\0\2\3\1\0\1\120\2\3\3\0"+
    "\5\3\1\121\1\3\1\122\1\123\16\3\23\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\124\5\3\1\125\16\3"+
    "\23\0\2\3\1\0\1\126\1\127\1\3\3\0\7\3"+
    "\1\130\5\3\1\131\11\3\23\0\2\3\1\0\1\132"+
    "\1\3\1\133\3\0\1\134\1\3\1\135\1\3\1\136"+
    "\17\3\1\137\2\3\23\0\2\3\1\0\2\3\1\140"+
    "\3\0\27\3\23\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\141\21\3\23\0\2\3\1\0\1\142\2\3\3\0"+
    "\10\3\1\143\16\3\23\0\2\3\1\0\3\3\3\0"+
    "\5\3\1\144\1\145\5\3\1\146\12\3\23\0\2\3"+
    "\1\0\3\3\3\0\4\3\1\147\22\3\63\0\1\150"+
    "\62\0\1\72\1\151\61\0\1\72\1\0\1\151\60\0"+
    "\1\72\66\0\1\152\63\0\1\153\55\0\1\150\6\0"+
    "\1\150\53\0\1\150\7\0\1\150\54\0\1\154\20\0"+
    "\2\3\1\0\2\3\1\155\3\0\27\3\23\0\2\3"+
    "\1\0\3\3\3\0\23\3\1\156\3\3\23\0\2\3"+
    "\1\0\3\3\3\0\24\3\1\157\2\3\23\0\2\3"+
    "\1\0\3\3\3\0\20\3\1\160\6\3\23\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\161\17\3\23\0\2\3"+
    "\1\0\3\3\3\0\23\3\1\162\3\3\23\0\2\3"+
    "\1\0\1\163\2\3\3\0\6\3\1\164\20\3\23\0"+
    "\2\3\1\0\3\3\3\0\1\3\1\165\12\3\1\166"+
    "\12\3\22\0\10\71\1\0\52\71\1\0\2\3\1\0"+
    "\2\3\1\167\3\0\27\3\23\0\2\3\1\0\3\3"+
    "\3\0\15\3\1\170\11\3\23\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\171\24\3\23\0\2\3\1\0\3\3"+
    "\3\0\10\3\1\172\16\3\23\0\2\3\1\0\3\3"+
    "\3\0\14\3\1\173\12\3\23\0\2\3\1\0\3\3"+
    "\3\0\15\3\1\174\11\3\23\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\175\24\3\23\0\2\3\1\0\2\3"+
    "\1\176\3\0\23\3\1\177\3\3\23\0\2\3\1\0"+
    "\3\3\3\0\2\3\1\200\2\3\1\201\21\3\23\0"+
    "\2\3\1\0\2\3\1\202\3\0\15\3\1\203\11\3"+
    "\23\0\2\3\1\0\3\3\3\0\5\3\1\204\21\3"+
    "\23\0\2\3\1\0\1\3\1\205\1\3\3\0\27\3"+
    "\23\0\2\3\1\0\3\3\3\0\15\3\1\206\11\3"+
    "\23\0\2\3\1\0\2\3\1\207\3\0\5\3\1\210"+
    "\4\3\1\211\14\3\23\0\2\3\1\0\1\3\1\212"+
    "\1\3\3\0\3\3\1\213\23\3\23\0\2\3\1\0"+
    "\3\3\3\0\25\3\1\214\1\3\23\0\2\3\1\0"+
    "\2\3\1\215\3\0\27\3\23\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\216\24\3\23\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\217\24\3\23\0\2\3\1\0\2\3"+
    "\1\220\3\0\27\3\23\0\2\3\1\0\1\3\1\221"+
    "\1\3\3\0\22\3\1\222\4\3\23\0\2\3\1\0"+
    "\3\3\3\0\7\3\1\223\17\3\23\0\2\3\1\0"+
    "\3\3\3\0\10\3\1\224\16\3\23\0\2\3\1\0"+
    "\3\3\3\0\6\3\1\225\20\3\23\0\2\3\1\0"+
    "\3\3\3\0\3\3\1\226\3\3\1\227\17\3\23\0"+
    "\2\3\1\0\3\3\3\0\14\3\1\230\12\3\23\0"+
    "\2\3\1\0\1\3\1\231\1\3\3\0\27\3\23\0"+
    "\2\3\1\0\3\3\3\0\3\3\1\232\11\3\1\233"+
    "\11\3\23\0\2\3\1\0\3\3\3\0\10\3\1\234"+
    "\16\3\23\0\2\3\1\0\1\235\2\3\3\0\4\3"+
    "\1\236\22\3\23\0\2\3\1\0\3\3\3\0\26\3"+
    "\1\237\23\0\2\3\1\0\3\3\3\0\5\3\1\240"+
    "\1\241\20\3\23\0\2\3\1\0\3\3\3\0\1\3"+
    "\1\242\25\3\23\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\243\21\3\23\0\2\3\1\0\3\3\3\0\10\3"+
    "\1\244\16\3\23\0\2\3\1\0\1\245\2\3\3\0"+
    "\27\3\23\0\2\3\1\0\3\3\3\0\6\3\1\246"+
    "\20\3\23\0\2\3\1\0\1\247\2\3\3\0\27\3"+
    "\23\0\2\3\1\0\3\3\3\0\6\3\1\250\20\3"+
    "\23\0\2\3\1\0\1\251\2\3\3\0\7\3\1\252"+
    "\17\3\23\0\2\3\1\0\3\3\3\0\6\3\1\253"+
    "\20\3\23\0\2\3\1\0\1\254\2\3\3\0\10\3"+
    "\1\255\16\3\23\0\2\3\1\0\3\3\3\0\1\256"+
    "\26\3\23\0\2\3\1\0\1\257\2\3\3\0\27\3"+
    "\24\0\1\260\61\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\261\24\3\23\0\2\3\1\0\3\3\3\0\7\3"+
    "\1\262\17\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\263\24\3\23\0\2\3\1\0\3\3\3\0\7\3"+
    "\1\264\17\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\265\24\3\23\0\2\3\1\0\3\3\3\0\15\3"+
    "\1\266\11\3\23\0\2\3\1\0\3\3\3\0\10\3"+
    "\1\267\16\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\270\24\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\271\24\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\272\24\3\23\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\273\21\3\23\0\2\3\1\0\3\3\3\0\7\3"+
    "\1\274\17\3\23\0\2\3\1\0\3\3\3\0\20\3"+
    "\1\275\6\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\276\24\3\23\0\2\3\1\0\1\3\1\277\1\3"+
    "\3\0\27\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\300\24\3\23\0\2\3\1\0\3\3\3\0\7\3"+
    "\1\301\17\3\23\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\302\23\3\23\0\2\3\1\0\3\3\3\0\6\3"+
    "\1\271\20\3\23\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\303\23\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\304\24\3\23\0\2\3\1\0\3\3\3\0\15\3"+
    "\1\305\11\3\23\0\2\3\1\0\2\3\1\306\3\0"+
    "\15\3\1\307\11\3\23\0\2\3\1\0\2\3\1\310"+
    "\3\0\27\3\23\0\2\3\1\0\3\3\3\0\14\3"+
    "\1\311\12\3\23\0\2\3\1\0\3\3\3\0\13\3"+
    "\1\312\13\3\23\0\2\3\1\0\3\3\3\0\11\3"+
    "\1\271\15\3\23\0\2\3\1\0\3\3\3\0\17\3"+
    "\1\313\7\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\314\24\3\23\0\2\3\1\0\3\3\3\0\6\3"+
    "\1\315\20\3\23\0\2\3\1\0\3\3\3\0\6\3"+
    "\1\316\20\3\23\0\2\3\1\0\3\3\3\0\10\3"+
    "\1\317\16\3\23\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\320\21\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\321\24\3\23\0\2\3\1\0\3\3\3\0\15\3"+
    "\1\322\11\3\23\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\323\21\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\324\24\3\23\0\2\3\1\0\1\325\2\3\3\0"+
    "\27\3\23\0\2\3\1\0\3\3\3\0\2\3\1\326"+
    "\24\3\23\0\2\3\1\0\3\3\3\0\1\327\26\3"+
    "\23\0\2\3\1\0\2\3\1\330\3\0\27\3\23\0"+
    "\2\3\1\0\3\3\3\0\4\3\1\331\22\3\23\0"+
    "\2\3\1\0\3\3\3\0\5\3\1\332\21\3\23\0"+
    "\2\3\1\0\1\3\1\333\1\3\3\0\27\3\23\0"+
    "\2\3\1\0\1\3\1\334\1\3\3\0\27\3\23\0"+
    "\2\3\1\0\3\3\3\0\10\3\1\335\16\3\23\0"+
    "\2\3\1\0\3\3\3\0\2\3\1\336\24\3\23\0"+
    "\2\3\1\0\2\3\1\337\3\0\3\3\1\340\23\3"+
    "\23\0\2\3\1\0\3\3\3\0\14\3\1\341\12\3"+
    "\23\0\2\3\1\0\2\3\1\342\3\0\27\3\23\0"+
    "\2\3\1\0\3\3\3\0\7\3\1\343\17\3\23\0"+
    "\2\3\1\0\3\3\3\0\6\3\1\323\20\3\23\0"+
    "\2\3\1\0\2\3\1\344\3\0\27\3\23\0\2\3"+
    "\1\0\1\345\2\3\3\0\27\3\23\0\2\3\1\0"+
    "\1\3\1\346\1\3\3\0\27\3\23\0\2\3\1\0"+
    "\2\3\1\347\3\0\27\3\23\0\2\3\1\0\3\3"+
    "\3\0\13\3\1\350\13\3\23\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\351\21\3\23\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\352\21\3\23\0\2\3\1\0\1\3"+
    "\1\353\1\3\3\0\21\3\1\354\5\3\23\0\2\3"+
    "\1\0\2\3\1\355\3\0\27\3\23\0\2\3\1\0"+
    "\3\3\3\0\7\3\1\356\17\3\23\0\2\3\1\0"+
    "\3\3\3\0\7\3\1\357\17\3\24\0\1\260\51\0"+
    "\1\360\7\0\2\3\1\0\3\3\3\0\6\3\1\361"+
    "\20\3\23\0\2\3\1\0\1\362\2\3\3\0\27\3"+
    "\23\0\2\3\1\0\3\3\3\0\15\3\1\363\11\3"+
    "\23\0\2\3\1\0\3\3\3\0\10\3\1\364\16\3"+
    "\23\0\2\3\1\0\3\3\3\0\24\3\1\365\2\3"+
    "\23\0\2\3\1\0\3\3\3\0\17\3\1\366\7\3"+
    "\23\0\2\3\1\0\3\3\3\0\2\3\1\367\24\3"+
    "\23\0\2\3\1\0\2\3\1\370\3\0\27\3\23\0"+
    "\2\3\1\0\3\3\3\0\6\3\1\371\20\3\23\0"+
    "\2\3\1\0\1\372\2\3\3\0\27\3\23\0\2\3"+
    "\1\0\3\3\3\0\17\3\1\373\7\3\23\0\2\3"+
    "\1\0\3\3\3\0\4\3\1\374\22\3\23\0\2\3"+
    "\1\0\3\3\3\0\15\3\1\375\11\3\23\0\2\3"+
    "\1\0\1\376\2\3\3\0\27\3\23\0\2\3\1\0"+
    "\2\3\1\377\3\0\27\3\23\0\2\3\1\0\3\3"+
    "\3\0\6\3\1\u0100\20\3\23\0\2\3\1\0\3\3"+
    "\3\0\6\3\1\u0101\20\3\23\0\2\3\1\0\3\3"+
    "\3\0\10\3\1\u0102\16\3\23\0\2\3\1\0\3\3"+
    "\3\0\3\3\1\u0103\23\3\23\0\2\3\1\0\3\3"+
    "\3\0\6\3\1\u0104\20\3\23\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\u0105\21\3\23\0\2\3\1\0\3\3"+
    "\3\0\7\3\1\u0106\17\3\23\0\2\3\1\0\3\3"+
    "\3\0\13\3\1\u0107\13\3\23\0\2\3\1\0\3\3"+
    "\3\0\2\3\1\u0108\24\3\23\0\2\3\1\0\2\3"+
    "\1\271\3\0\27\3\23\0\2\3\1\0\3\3\3\0"+
    "\5\3\1\u0109\21\3\23\0\2\3\1\0\3\3\3\0"+
    "\20\3\1\u010a\6\3\23\0\2\3\1\0\3\3\3\0"+
    "\11\3\1\u010b\15\3\23\0\2\3\1\0\3\3\3\0"+
    "\7\3\1\167\17\3\23\0\2\3\1\0\3\3\3\0"+
    "\2\3\1\u010c\24\3\23\0\2\3\1\0\3\3\3\0"+
    "\12\3\1\u010d\14\3\23\0\2\3\1\0\3\3\3\0"+
    "\11\3\1\u010e\15\3\23\0\2\3\1\0\3\3\3\0"+
    "\11\3\1\u010f\15\3\23\0\2\3\1\0\3\3\3\0"+
    "\6\3\1\u0110\20\3\23\0\2\3\1\0\3\3\3\0"+
    "\10\3\1\u0111\16\3\23\0\2\3\1\0\1\u0112\2\3"+
    "\3\0\27\3\23\0\2\3\1\0\3\3\3\0\17\3"+
    "\1\u0113\7\3\23\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\u0114\23\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u0115\24\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u0116\24\3\23\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\u0117\23\3\23\0\2\3\1\0\1\3\1\u0118\1\3"+
    "\3\0\27\3\23\0\2\3\1\0\3\3\3\0\14\3"+
    "\1\u0119\12\3\23\0\2\3\1\0\2\3\1\u011a\3\0"+
    "\27\3\23\0\2\3\1\0\3\3\3\0\20\3\1\u011b"+
    "\6\3\23\0\2\3\1\0\2\3\1\u011c\3\0\27\3"+
    "\23\0\2\3\1\0\3\3\3\0\5\3\1\u011d\21\3"+
    "\23\0\2\3\1\0\3\3\3\0\2\3\1\u011e\24\3"+
    "\23\0\2\3\1\0\1\u011f\2\3\3\0\27\3\23\0"+
    "\2\3\1\0\3\3\3\0\2\3\1\u0120\24\3\23\0"+
    "\2\3\1\0\1\3\1\u0121\1\3\3\0\12\3\1\u0122"+
    "\14\3\23\0\2\3\1\0\3\3\3\0\3\3\1\u0123"+
    "\23\3\23\0\2\3\1\0\3\3\3\0\23\3\1\u0124"+
    "\3\3\23\0\2\3\1\0\3\3\3\0\12\3\1\u0125"+
    "\14\3\23\0\2\3\1\0\3\3\3\0\5\3\1\u0126"+
    "\21\3\23\0\2\3\1\0\1\3\1\u0127\1\3\3\0"+
    "\27\3\23\0\2\3\1\0\3\3\3\0\3\3\1\u0128"+
    "\23\3\23\0\2\3\1\0\3\3\3\0\2\3\1\u0129"+
    "\24\3\23\0\2\3\1\0\1\3\1\u012a\1\3\3\0"+
    "\27\3\23\0\2\3\1\0\3\3\3\0\5\3\1\u012b"+
    "\21\3\23\0\2\3\1\0\1\3\1\u012c\1\3\3\0"+
    "\27\3\23\0\2\3\1\0\1\3\1\u012d\1\3\3\0"+
    "\27\3\23\0\2\3\1\0\2\3\1\u012e\3\0\27\3"+
    "\23\0\2\3\1\0\1\u012f\2\3\3\0\27\3\23\0"+
    "\2\3\1\0\2\3\1\u0130\3\0\27\3\23\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u0131\17\3\23\0\2\3"+
    "\1\0\3\3\3\0\3\3\1\u0132\23\3\23\0\2\3"+
    "\1\0\3\3\3\0\5\3\1\u0133\21\3\23\0\2\3"+
    "\1\0\3\3\3\0\5\3\1\u0134\21\3\23\0\2\3"+
    "\1\0\3\3\3\0\3\3\1\u0135\23\3\23\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u0136\24\3\23\0\2\3"+
    "\1\0\2\3\1\u0137\3\0\27\3\23\0\2\3\1\0"+
    "\3\3\3\0\12\3\1\u0138\14\3\23\0\2\3\1\0"+
    "\3\3\3\0\3\3\1\u0139\23\3\23\0\2\3\1\0"+
    "\3\3\3\0\5\3\1\u013a\21\3\23\0\2\3\1\0"+
    "\2\3\1\u013b\3\0\27\3\23\0\2\3\1\0\3\3"+
    "\3\0\13\3\1\u013c\13\3\23\0\2\3\1\0\3\3"+
    "\3\0\4\3\1\u013d\22\3\23\0\2\3\1\0\3\3"+
    "\3\0\11\3\1\u013e\15\3\23\0\2\3\1\0\3\3"+
    "\3\0\5\3\1\u013f\21\3\23\0\2\3\1\0\1\u0140"+
    "\2\3\3\0\27\3\23\0\2\3\1\0\3\3\3\0"+
    "\15\3\1\u0141\11\3\23\0\2\3\1\0\3\3\3\0"+
    "\12\3\1\u0142\14\3\23\0\2\3\1\0\2\3\1\u0143"+
    "\3\0\27\3\23\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\u0144\23\3\23\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\u0145\23\3\23\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\u0146\21\3\23\0\2\3\1\0\3\3\3\0\5\3"+
    "\1\u0147\21\3\23\0\2\3\1\0\1\u0148\2\3\3\0"+
    "\27\3\23\0\2\3\1\0\3\3\3\0\5\3\1\u0149"+
    "\21\3\23\0\2\3\1\0\1\3\1\271\1\3\3\0"+
    "\27\3\23\0\2\3\1\0\1\u014a\2\3\3\0\27\3"+
    "\23\0\2\3\1\0\3\3\3\0\13\3\1\u014b\13\3"+
    "\23\0\2\3\1\0\3\3\3\0\14\3\1\u014c\12\3"+
    "\23\0\2\3\1\0\3\3\3\0\3\3\1\u014d\23\3"+
    "\23\0\2\3\1\0\3\3\3\0\7\3\1\u014e\17\3"+
    "\23\0\2\3\1\0\3\3\3\0\13\3\1\u014f\13\3"+
    "\23\0\2\3\1\0\3\3\3\0\10\3\1\u0150\16\3"+
    "\23\0\2\3\1\0\3\3\3\0\1\3\1\u0151\25\3"+
    "\23\0\2\3\1\0\3\3\3\0\4\3\1\u0152\22\3"+
    "\23\0\2\3\1\0\3\3\3\0\7\3\1\u0153\17\3"+
    "\23\0\2\3\1\0\2\3\1\u0154\3\0\27\3\23\0"+
    "\2\3\1\0\3\3\3\0\17\3\1\u0155\7\3\23\0"+
    "\2\3\1\0\2\3\1\u0156\3\0\27\3\23\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u0157\17\3\23\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u0158\17\3\23\0\2\3"+
    "\1\0\3\3\3\0\7\3\1\u0159\17\3\23\0\2\3"+
    "\1\0\3\3\3\0\2\3\1\u015a\24\3\23\0\2\3"+
    "\1\0\2\3\1\u015b\3\0\27\3\23\0\2\3\1\0"+
    "\3\3\3\0\7\3\1\u015c\17\3\23\0\2\3\1\0"+
    "\3\3\3\0\3\3\1\u015d\23\3\23\0\2\3\1\0"+
    "\2\3\1\u015e\3\0\27\3\23\0\2\3\1\0\3\3"+
    "\3\0\3\3\1\u015f\23\3\23\0\2\3\1\0\2\3"+
    "\1\u0160\3\0\27\3\23\0\2\3\1\0\3\3\3\0"+
    "\2\3\1\u0161\24\3\23\0\2\3\1\0\2\3\1\u0162"+
    "\3\0\27\3\23\0\2\3\1\0\3\3\3\0\1\3"+
    "\1\u0163\25\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u0164\24\3\23\0\2\3\1\0\3\3\3\0\6\3"+
    "\1\u0165\20\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u0166\24\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u0167\24\3\23\0\2\3\1\0\3\3\3\0\7\3"+
    "\1\u0168\17\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u0169\24\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u016a\24\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u016b\24\3\23\0\2\3\1\0\3\3\3\0\2\3"+
    "\1\u016c\24\3\23\0\2\3\1\0\3\3\3\0\13\3"+
    "\1\u016d\13\3\23\0\2\3\1\0\3\3\3\0\10\3"+
    "\1\u016e\16\3\23\0\2\3\1\0\3\3\3\0\13\3"+
    "\1\u016f\13\3\23\0\2\3\1\0\3\3\3\0\3\3"+
    "\1\u0170\23\3\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14433];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\34\1\7\11\13\1\1\11"+
    "\55\1\4\11\1\0\103\1\1\0\77\1\1\11\200\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexemas;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 72: 
          { lexemas=yytext(); return Struct;
          }
        case 101: break;
        case 16: 
          { lexemas=yytext(); return Parentesis_a;
          }
        case 102: break;
        case 19: 
          { lexemas=yytext(); return Llave_c;
          }
        case 103: break;
        case 78: 
          { lexemas=yytext(); return Public;
          }
        case 104: break;
        case 68: 
          { lexemas=yytext(); return Object;
          }
        case 105: break;
        case 67: 
          { lexemas=yytext(); return Return;
          }
        case 106: break;
        case 9: 
          { lexemas=yytext(); return Suma;
          }
        case 107: break;
        case 91: 
          { lexemas=yytext(); return Readonly;
          }
        case 108: break;
        case 56: 
          { lexemas=yytext(); return Catch;
          }
        case 109: break;
        case 38: 
          { lexemas=yytext(); return For;
          }
        case 110: break;
        case 90: 
          { lexemas=yytext(); return Abstract;
          }
        case 111: break;
        case 74: 
          { lexemas=yytext(); return Switch;
          }
        case 112: break;
        case 88: 
          { lexemas=yytext(); return Explicit;
          }
        case 113: break;
        case 93: 
          { lexemas=yytext(); return Operator;
          }
        case 114: break;
        case 10: 
          { lexemas=yytext(); return Resta;
          }
        case 115: break;
        case 7: 
          { lexemas=yytext(); return Comillas;
          }
        case 116: break;
        case 12: 
          { lexemas=yytext(); return Y_Logico_Bit;
          }
        case 117: break;
        case 84: 
          { lexemas=yytext(); return Virtual;
          }
        case 118: break;
        case 73: 
          { lexemas=yytext(); return Sealed;
          }
        case 119: break;
        case 26: 
          { lexemas=yytext(); return Is;
          }
        case 120: break;
        case 5: 
          { lexemas=yytext(); return Division;
          }
        case 121: break;
        case 60: 
          { lexemas=yytext(); return False;
          }
        case 122: break;
        case 8: 
          { lexemas=yytext(); return Igual;
          }
        case 123: break;
        case 57: 
          { lexemas=yytext(); return Class;
          }
        case 124: break;
        case 11: 
          { lexemas=yytext(); return Multiplicacion;
          }
        case 125: break;
        case 35: 
          { lexemas=yytext(); return Try;
          }
        case 126: break;
        case 39: 
          { lexemas=yytext(); return Null;
          }
        case 127: break;
        case 4: 
          { /*Ignore*/
          }
        case 128: break;
        case 50: 
          { lexemas=yytext(); return Uint;
          }
        case 129: break;
        case 30: 
          { lexemas = yytext(); return Op_incremento;
          }
        case 130: break;
        case 44: 
          { lexemas=yytext(); return Bool;
          }
        case 131: break;
        case 31: 
          { lexemas=yytext(); return Y_Logico;
          }
        case 132: break;
        case 15: 
          { lexemas = yytext(); return Op_relacional;
          }
        case 133: break;
        case 71: 
          { lexemas=yytext(); return Sizeof;
          }
        case 134: break;
        case 25: 
          { lexemas=yytext(); return If;
          }
        case 135: break;
        case 96: 
          { lexemas=yytext(); return Interface;
          }
        case 136: break;
        case 21: 
          { lexemas = yytext(); return Corchete_c;
          }
        case 137: break;
        case 45: 
          { lexemas=yytext(); return Enum;
          }
        case 138: break;
        case 69: 
          { lexemas=yytext(); return Unsafe;
          }
        case 139: break;
        case 18: 
          { lexemas=yytext(); return Llave_a;
          }
        case 140: break;
        case 63: 
          { lexemas=yytext(); return Sbyte;
          }
        case 141: break;
        case 95: 
          { lexemas=yytext(); return Volatile;
          }
        case 142: break;
        case 1: 
          { return ERROR;
          }
        case 143: break;
        case 61: 
          { lexemas=yytext(); return Ulong;
          }
        case 144: break;
        case 23: 
          { lexemas=yytext(); return Punto;
          }
        case 145: break;
        case 65: 
          { lexemas=yytext(); return Typeof;
          }
        case 146: break;
        case 28: 
          { lexemas=yytext(); return As;
          }
        case 147: break;
        case 53: 
          { lexemas=yytext(); return Throw;
          }
        case 148: break;
        case 27: 
          { lexemas = yytext(); return Op_atribucion;
          }
        case 149: break;
        case 100: 
          { lexemas=yytext(); return Stackalloc;
          }
        case 150: break;
        case 81: 
          { lexemas=yytext(); return Foreach;
          }
        case 151: break;
        case 14: 
          { lexemas=yytext(); return Negacion;
          }
        case 152: break;
        case 83: 
          { lexemas=yytext(); return Statict;
          }
        case 153: break;
        case 77: 
          { lexemas=yytext(); return Printf;
          }
        case 154: break;
        case 79: 
          { lexemas=yytext(); return Checked;
          }
        case 155: break;
        case 59: 
          { lexemas=yytext(); return Fixed;
          }
        case 156: break;
        case 46: 
          { lexemas=yytext(); return Else;
          }
        case 157: break;
        case 32: 
          { lexemas=yytext(); return O_Logico;
          }
        case 158: break;
        case 20: 
          { lexemas = yytext(); return Corchete_a;
          }
        case 159: break;
        case 55: 
          { lexemas=yytext(); return Event;
          }
        case 160: break;
        case 49: 
          { lexemas=yytext(); return Goto;
          }
        case 161: break;
        case 51: 
          { lexemas=yytext(); return Main;
          }
        case 162: break;
        case 86: 
          { lexemas=yytext(); return Internal;
          }
        case 163: break;
        case 2: 
          { lexemas=yytext(); return Identificador;
          }
        case 164: break;
        case 22: 
          { lexemas=yytext(); return P_coma;
          }
        case 165: break;
        case 36: 
          { lexemas=yytext(); return Ref;
          }
        case 166: break;
        case 64: 
          { lexemas=yytext(); return While;
          }
        case 167: break;
        case 47: 
          { lexemas=yytext(); return Case;
          }
        case 168: break;
        case 17: 
          { lexemas=yytext(); return Parentesis_c;
          }
        case 169: break;
        case 40: 
          { lexemas=yytext(); return This;
          }
        case 170: break;
        case 70: 
          { lexemas=yytext(); return Ushort;
          }
        case 171: break;
        case 6: 
          { return Linea;
          }
        case 172: break;
        case 34: 
          { lexemas=yytext(); return New;
          }
        case 173: break;
        case 37: 
          { lexemas=yytext(); return Out;
          }
        case 174: break;
        case 58: 
          { lexemas=yytext(); return Const;
          }
        case 175: break;
        case 97: 
          { lexemas=yytext(); return Namespace;
          }
        case 176: break;
        case 76: 
          { lexemas=yytext(); return Params;
          }
        case 177: break;
        case 92: 
          { lexemas=yytext(); return Override;
          }
        case 178: break;
        case 41: 
          { lexemas=yytext(); return True;
          }
        case 179: break;
        case 66: 
          { lexemas=yytext(); return Extern;
          }
        case 180: break;
        case 33: 
          { lexemas=yytext(); return Int;
          }
        case 181: break;
        case 43: 
          { lexemas=yytext(); return Base;
          }
        case 182: break;
        case 54: 
          { lexemas=yytext(); return Break;
          }
        case 183: break;
        case 94: 
          { lexemas=yytext(); return Delegate;
          }
        case 184: break;
        case 75: 
          { lexemas=yytext(); return Cadena;
          }
        case 185: break;
        case 48: 
          { lexemas=yytext(); return Lock;
          }
        case 186: break;
        case 62: 
          { lexemas=yytext(); return Using;
          }
        case 187: break;
        case 3: 
          { lexemas=yytext(); return Numero;
          }
        case 188: break;
        case 87: 
          { lexemas=yytext(); return Implicit;
          }
        case 189: break;
        case 13: 
          { lexemas=yytext(); return O_Logico_Bit;
          }
        case 190: break;
        case 82: 
          { lexemas=yytext(); return Decimal;
          }
        case 191: break;
        case 80: 
          { lexemas=yytext(); return Finally;
          }
        case 192: break;
        case 85: 
          { lexemas=yytext(); return Private;
          }
        case 193: break;
        case 52: 
          { lexemas=yytext(); return Void;
          }
        case 194: break;
        case 98: 
          { lexemas=yytext(); return Unchecked;
          }
        case 195: break;
        case 29: 
          { lexemas=yytext(); return Do;
          }
        case 196: break;
        case 24: 
          { lexemas=yytext(); return In;
          }
        case 197: break;
        case 42: 
          { lexemas=yytext(); return T_dato;
          }
        case 198: break;
        case 99: 
          { lexemas=yytext(); return Protected;
          }
        case 199: break;
        case 89: 
          { lexemas=yytext(); return Continue;
          }
        case 200: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
