
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 11 22:14:47 COT 2020
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 11 22:14:47 COT 2020
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\024\010\000\002\024" +
    "\006\000\002\024\011\000\002\024\007\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\002\011\000\002\002" +
    "\010\000\002\002\012\000\002\002\011\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\011\000\002\004\007\000\002\004\011\000" +
    "\002\004\006\000\002\004\006\000\002\004\010\000\002" +
    "\004\010\000\002\004\011\000\002\004\011\000\002\006" +
    "\011\000\002\013\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\007\015\000\002\010\011\000\002\011\013\000\002" +
    "\012\011\000\002\014\012\000\002\014\011\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\022\011" +
    "\000\002\023\010\000\002\023\010\000\002\023\004\000" +
    "\002\023\011\000\002\023\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\010\004\010\117\005\167\006\001\002\000" +
    "\006\004\267\167\266\001\002\000\004\133\256\001\002" +
    "\000\004\161\251\001\002\000\004\002\250\001\002\000" +
    "\004\167\011\001\002\000\004\161\012\001\002\000\004" +
    "\162\013\001\002\000\004\163\014\001\002\000\016\007" +
    "\024\010\023\011\017\107\015\114\021\115\031\001\002" +
    "\000\004\161\223\001\002\000\022\007\uffdb\010\uffdb\011" +
    "\uffdb\111\uffdb\113\uffdb\114\uffdb\115\uffdb\164\uffdb\001\002" +
    "\000\004\161\211\001\002\000\022\007\uffd8\010\uffd8\011" +
    "\uffd8\111\uffd8\113\uffd8\114\uffd8\115\uffd8\164\uffd8\001\002" +
    "\000\004\161\203\001\002\000\022\007\uffe1\010\uffe1\011" +
    "\uffe1\111\uffe1\113\uffe1\114\uffe1\115\uffe1\164\uffe1\001\002" +
    "\000\004\174\164\001\002\000\010\150\071\151\072\174" +
    "\142\001\002\000\022\007\uffdd\010\uffdd\011\uffdd\111\uffdd" +
    "\113\uffdd\114\uffdd\115\uffdd\164\uffdd\001\002\000\022\007" +
    "\uffd7\010\uffd7\011\uffd7\111\uffd7\113\uffd7\114\uffd7\115\uffd7" +
    "\164\uffd7\001\002\000\022\007\uffdf\010\uffdf\011\uffdf\111" +
    "\uffdf\113\uffdf\114\uffdf\115\uffdf\164\uffdf\001\002\000\020" +
    "\007\024\010\023\011\017\113\123\114\021\115\031\164" +
    "\140\001\002\000\004\161\032\001\002\000\006\007\035" +
    "\174\034\001\002\000\004\162\114\001\002\000\004\121" +
    "\106\001\002\000\004\174\036\001\002\000\004\121\037" +
    "\001\002\000\004\175\040\001\002\000\004\171\041\001" +
    "\002\000\010\152\044\153\046\174\045\001\002\000\004" +
    "\171\067\001\002\000\006\162\uffca\171\uffca\001\002\000" +
    "\006\162\uffe8\171\uffe8\001\002\000\022\133\056\134\052" +
    "\135\057\136\051\137\047\140\054\141\053\142\050\001" +
    "\002\000\006\162\uffe7\171\uffe7\001\002\000\014\006\ufff3" +
    "\152\ufff3\153\ufff3\174\ufff3\175\ufff3\001\002\000\014\006" +
    "\ufff0\152\ufff0\153\ufff0\174\ufff0\175\ufff0\001\002\000\014" +
    "\006\ufff4\152\ufff4\153\ufff4\174\ufff4\175\ufff4\001\002\000" +
    "\014\006\ufff6\152\ufff6\153\ufff6\174\ufff6\175\ufff6\001\002" +
    "\000\014\006\ufff1\152\ufff1\153\ufff1\174\ufff1\175\ufff1\001" +
    "\002\000\014\006\ufff2\152\ufff2\153\ufff2\174\ufff2\175\ufff2" +
    "\001\002\000\014\006\061\152\044\153\046\174\062\175" +
    "\060\001\002\000\014\006\ufff7\152\ufff7\153\ufff7\174\ufff7" +
    "\175\ufff7\001\002\000\014\006\ufff5\152\ufff5\153\ufff5\174" +
    "\ufff5\175\ufff5\001\002\000\006\162\uffc8\171\uffc8\001\002" +
    "\000\006\006\064\174\065\001\002\000\006\162\uffc7\171" +
    "\uffc7\001\002\000\006\162\uffc9\171\uffc9\001\002\000\006" +
    "\162\uffc6\171\uffc6\001\002\000\004\006\066\001\002\000" +
    "\006\162\uffc5\171\uffc5\001\002\000\010\150\071\151\072" +
    "\174\074\001\002\000\004\174\105\001\002\000\010\162" +
    "\uffea\171\uffea\174\uffea\001\002\000\010\162\uffe9\171\uffe9" +
    "\174\uffe9\001\002\000\004\162\uffc0\001\002\000\020\143" +
    "\077\144\103\145\076\146\100\147\102\150\071\151\072" +
    "\001\002\000\004\175\104\001\002\000\006\006\uffed\175" +
    "\uffed\001\002\000\006\006\uffef\175\uffef\001\002\000\006" +
    "\006\uffec\175\uffec\001\002\000\004\162\uffbd\001\002\000" +
    "\006\006\uffeb\175\uffeb\001\002\000\006\006\uffee\175\uffee" +
    "\001\002\000\004\162\uffbe\001\002\000\004\162\uffbc\001" +
    "\002\000\004\175\107\001\002\000\004\171\110\001\002" +
    "\000\010\152\044\153\046\174\045\001\002\000\004\171" +
    "\112\001\002\000\010\150\071\151\072\174\074\001\002" +
    "\000\004\162\uffbf\001\002\000\004\163\115\001\002\000" +
    "\016\007\024\010\023\011\017\107\015\114\021\115\031" +
    "\001\002\000\020\007\024\010\023\011\017\113\123\114" +
    "\021\115\031\164\125\001\002\000\022\007\uffdc\010\uffdc" +
    "\011\uffdc\111\uffdc\113\uffdc\114\uffdc\115\uffdc\164\uffdc\001" +
    "\002\000\022\007\uffd9\010\uffd9\011\uffd9\111\uffd9\113\uffd9" +
    "\114\uffd9\115\uffd9\164\uffd9\001\002\000\022\007\uffe2\010" +
    "\uffe2\011\uffe2\111\uffe2\113\uffe2\114\uffe2\115\uffe2\164\uffe2" +
    "\001\002\000\022\007\uffde\010\uffde\011\uffde\111\uffde\113" +
    "\uffde\114\uffde\115\uffde\164\uffde\001\002\000\004\163\130" +
    "\001\002\000\022\007\uffe0\010\uffe0\011\uffe0\111\uffe0\113" +
    "\uffe0\114\uffe0\115\uffe0\164\uffe0\001\002\000\022\007\uffc1" +
    "\010\uffc1\011\uffc1\111\uffc1\113\uffc1\114\uffc1\115\uffc1\164" +
    "\uffc1\001\002\000\004\113\123\001\002\000\022\007\uffda" +
    "\010\uffda\011\uffda\111\uffda\113\uffda\114\uffda\115\uffda\164" +
    "\uffda\001\002\000\016\007\024\010\023\011\017\107\015" +
    "\114\021\115\031\001\002\000\020\007\024\010\023\011" +
    "\017\113\123\114\021\115\031\164\132\001\002\000\004" +
    "\114\133\001\002\000\004\161\134\001\002\000\010\152" +
    "\044\153\046\174\045\001\002\000\004\162\136\001\002" +
    "\000\004\171\137\001\002\000\022\007\uffc2\010\uffc2\011" +
    "\uffc2\111\uffc2\113\uffc2\114\uffc2\115\uffc2\164\uffc2\001\002" +
    "\000\004\002\uffe6\001\002\000\004\174\162\001\002\000" +
    "\024\121\145\143\077\144\103\145\076\146\100\147\102" +
    "\150\071\151\072\171\144\001\002\000\004\175\155\001" +
    "\002\000\022\007\uffd6\010\uffd6\011\uffd6\111\uffd6\113\uffd6" +
    "\114\uffd6\115\uffd6\164\uffd6\001\002\000\004\175\150\001" +
    "\002\000\004\171\147\001\002\000\022\007\uffd1\010\uffd1" +
    "\011\uffd1\111\uffd1\113\uffd1\114\uffd1\115\uffd1\164\uffd1\001" +
    "\002\000\006\171\151\172\152\001\002\000\022\007\uffd3" +
    "\010\uffd3\011\uffd3\111\uffd3\113\uffd3\114\uffd3\115\uffd3\164" +
    "\uffd3\001\002\000\004\175\153\001\002\000\004\171\154" +
    "\001\002\000\022\007\uffd2\010\uffd2\011\uffd2\111\uffd2\113" +
    "\uffd2\114\uffd2\115\uffd2\164\uffd2\001\002\000\006\171\156" +
    "\172\157\001\002\000\022\007\uffd5\010\uffd5\011\uffd5\111" +
    "\uffd5\113\uffd5\114\uffd5\115\uffd5\164\uffd5\001\002\000\004" +
    "\175\160\001\002\000\004\171\161\001\002\000\022\007" +
    "\uffd4\010\uffd4\011\uffd4\111\uffd4\113\uffd4\114\uffd4\115\uffd4" +
    "\164\uffd4\001\002\000\004\171\163\001\002\000\022\007" +
    "\uffd0\010\uffd0\011\uffd0\111\uffd0\113\uffd0\114\uffd0\115\uffd0" +
    "\164\uffd0\001\002\000\016\121\166\143\077\144\103\145" +
    "\076\146\100\147\102\001\002\000\004\006\175\001\002" +
    "\000\004\006\167\001\002\000\006\006\170\174\171\001" +
    "\002\000\004\171\174\001\002\000\004\006\172\001\002" +
    "\000\004\171\173\001\002\000\022\007\uffcc\010\uffcc\011" +
    "\uffcc\111\uffcc\113\uffcc\114\uffcc\115\uffcc\164\uffcc\001\002" +
    "\000\022\007\uffce\010\uffce\011\uffce\111\uffce\113\uffce\114" +
    "\uffce\115\uffce\164\uffce\001\002\000\006\006\176\174\177" +
    "\001\002\000\004\171\202\001\002\000\004\006\200\001" +
    "\002\000\004\171\201\001\002\000\022\007\uffcd\010\uffcd" +
    "\011\uffcd\111\uffcd\113\uffcd\114\uffcd\115\uffcd\164\uffcd\001" +
    "\002\000\022\007\uffcf\010\uffcf\011\uffcf\111\uffcf\113\uffcf" +
    "\114\uffcf\115\uffcf\164\uffcf\001\002\000\010\152\044\153" +
    "\046\174\045\001\002\000\004\162\205\001\002\000\004" +
    "\163\206\001\002\000\016\007\024\010\023\011\017\107" +
    "\015\114\021\115\031\001\002\000\020\007\024\010\023" +
    "\011\017\113\123\114\021\115\031\164\210\001\002\000" +
    "\022\007\uffc3\010\uffc3\011\uffc3\111\uffc3\113\uffc3\114\uffc3" +
    "\115\uffc3\164\uffc3\001\002\000\010\152\044\153\046\174" +
    "\045\001\002\000\004\162\213\001\002\000\004\163\214" +
    "\001\002\000\016\007\024\010\023\011\017\107\015\114" +
    "\021\115\031\001\002\000\020\007\024\010\023\011\017" +
    "\113\123\114\021\115\031\164\216\001\002\000\024\007" +
    "\uffcb\010\uffcb\011\uffcb\012\217\111\uffcb\113\uffcb\114\uffcb" +
    "\115\uffcb\164\uffcb\001\002\000\004\163\220\001\002\000" +
    "\016\007\024\010\023\011\017\107\015\114\021\115\031" +
    "\001\002\000\020\007\024\010\023\011\017\113\123\114" +
    "\021\115\031\164\222\001\002\000\022\007\uffc4\010\uffc4" +
    "\011\uffc4\111\uffc4\113\uffc4\114\uffc4\115\uffc4\164\uffc4\001" +
    "\002\000\004\174\224\001\002\000\004\162\225\001\002" +
    "\000\004\163\226\001\002\000\006\023\227\110\230\001" +
    "\002\000\004\120\247\001\002\000\006\174\234\175\233" +
    "\001\002\000\004\164\232\001\002\000\022\007\uffbb\010" +
    "\uffbb\011\uffbb\111\uffbb\113\uffbb\114\uffbb\115\uffbb\164\uffbb" +
    "\001\002\000\004\120\242\001\002\000\004\120\235\001" +
    "\002\000\016\007\024\010\023\011\017\107\015\114\021" +
    "\115\031\001\002\000\020\007\024\010\023\011\017\111" +
    "\237\113\123\114\021\115\031\001\002\000\004\171\240" +
    "\001\002\000\010\023\227\110\230\164\uffba\001\002\000" +
    "\004\164\uffb7\001\002\000\016\007\024\010\023\011\017" +
    "\107\015\114\021\115\031\001\002\000\020\007\024\010" +
    "\023\011\017\111\244\113\123\114\021\115\031\001\002" +
    "\000\004\171\245\001\002\000\010\023\227\110\230\164" +
    "\uffb9\001\002\000\004\164\uffb6\001\002\000\004\164\uffb8" +
    "\001\002\000\004\002\001\001\002\000\004\162\252\001" +
    "\002\000\004\163\253\001\002\000\016\007\024\010\023" +
    "\011\017\107\015\114\021\115\031\001\002\000\020\007" +
    "\024\010\023\011\017\113\123\114\021\115\031\164\255" +
    "\001\002\000\004\002\uffe5\001\002\000\004\174\257\001" +
    "\002\000\006\134\260\172\261\001\002\000\010\004\uffff" +
    "\117\005\167\uffff\001\002\000\004\174\262\001\002\000" +
    "\004\134\263\001\002\000\010\004\000\117\005\167\000" +
    "\001\002\000\006\004\ufffe\167\ufffe\001\002\000\006\004" +
    "\ufffd\167\ufffd\001\002\000\004\161\276\001\002\000\004" +
    "\167\270\001\002\000\004\161\271\001\002\000\004\162" +
    "\272\001\002\000\004\163\273\001\002\000\016\007\024" +
    "\010\023\011\017\107\015\114\021\115\031\001\002\000" +
    "\020\007\024\010\023\011\017\113\123\114\021\115\031" +
    "\164\275\001\002\000\004\002\uffe4\001\002\000\004\162" +
    "\277\001\002\000\004\163\300\001\002\000\016\007\024" +
    "\010\023\011\017\107\015\114\021\115\031\001\002\000" +
    "\020\007\024\010\023\011\017\113\123\114\021\115\031" +
    "\164\302\001\002\000\004\002\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\002\006\024\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\027\004\021\006\026\007\024" +
    "\010\015\012\017\022\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\120\006\123\007\121\010\116\011" +
    "\125\012\117\001\001\000\002\001\001\000\004\014\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\041\021\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\072\020\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\074\020\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\110\021\042\001\001\000\002" +
    "\001\001\000\006\005\112\020\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\115\004\021\006\026" +
    "\007\024\010\015\012\017\022\025\001\001\000\016\004" +
    "\120\006\123\007\121\010\116\011\125\012\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\126\001\001\000\002\001\001\000" +
    "\020\003\130\004\021\006\026\007\024\010\015\012\017" +
    "\022\025\001\001\000\016\004\120\006\123\007\121\010" +
    "\116\011\125\012\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\134\021\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\142\020\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\203\021\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\206\004\021\006\026\007\024\010" +
    "\015\012\017\022\025\001\001\000\016\004\120\006\123" +
    "\007\121\010\116\011\125\012\117\001\001\000\002\001" +
    "\001\000\006\013\211\021\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\214\004\021\006\026\007" +
    "\024\010\015\012\017\022\025\001\001\000\016\004\120" +
    "\006\123\007\121\010\116\011\125\012\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\220\004\021" +
    "\006\026\007\024\010\015\012\017\022\025\001\001\000" +
    "\016\004\120\006\123\007\121\010\116\011\125\012\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\235" +
    "\004\021\006\026\007\024\010\015\012\017\022\025\001" +
    "\001\000\016\004\120\006\123\007\121\010\116\011\125" +
    "\012\117\001\001\000\002\001\001\000\004\023\240\001" +
    "\001\000\002\001\001\000\020\003\242\004\021\006\026" +
    "\007\024\010\015\012\017\022\025\001\001\000\016\004" +
    "\120\006\123\007\121\010\116\011\125\012\117\001\001" +
    "\000\002\001\001\000\004\023\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\253\004\021\006\026\007" +
    "\024\010\015\012\017\022\025\001\001\000\016\004\120" +
    "\006\123\007\121\010\116\011\125\012\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\273\004\021" +
    "\006\026\007\024\010\015\012\017\022\025\001\001\000" +
    "\016\004\120\006\123\007\121\010\116\011\125\012\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\300\004\021\006\026\007\024\010\015" +
    "\012\017\022\025\001\001\000\016\004\120\006\123\007" +
    "\121\010\116\011\125\012\117\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_CASE ::= Case Identificador Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_CASE ::= Default Dos_puntos 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_CASE ::= Case Identificador Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SWITCH_CASE ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_FOR ::= OP_INCREMENTO Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_FOR ::= Identificador OP_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_FOR ::= Identificador OP_ATRIBUCION Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Cadena Identificador OP_ATRIBUCION Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Cadena Identificador OP_ATRIBUCION Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_dato OP_INCREMENTO Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_dato Identificador OP_INCREMENTO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_dato Identificador OP_ATRIBUCION Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= T_dato Identificador OP_ATRIBUCION Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INICIO ::= BIBLIOTECA Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INICIO ::= BIBLIOTECA Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_BOOLEANO ::= Boleano_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_BOOLEANO ::= Boleano_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_INCREMENTO ::= Decremento_unitario 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_INCREMENTO",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_INCREMENTO ::= Incremento_unitario 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_INCREMENTO",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP_ATRIBUCION ::= Asignacion_modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_ATRIBUCION",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP_ATRIBUCION ::= Asignacion_division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_ATRIBUCION",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OP_ATRIBUCION ::= Asignacion_multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_ATRIBUCION",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OP_ATRIBUCION ::= Asignacion_resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_ATRIBUCION",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OP_ATRIBUCION ::= Asignacion_suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_ATRIBUCION",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OP_RELACIONAL ::= Desplazar_a_izquierda 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OP_RELACIONAL ::= Desplazar_a_derecha 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OP_RELACIONAL ::= Menor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OP_RELACIONAL ::= Mayor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OP_RELACIONAL ::= Diferente_de 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OP_RELACIONAL ::= Igual_a 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OP_RELACIONAL ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OP_RELACIONAL ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OP_LOGICO ::= O_Logico_Bit 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OP_LOGICO ::= Y_Logico_Bit 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OP_LOGICO ::= Negacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OP_LOGICO ::= O_Logico 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OP_LOGICO ::= Y_Logico 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BIBLIOTECA ::= Incluir Menor_que Identificador Mayor_que BIBLIOTECA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("BIBLIOTECA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BIBLIOTECA ::= Incluir Menor_que Identificador Punto Identificador Mayor_que BIBLIOTECA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("BIBLIOTECA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BIBLIOTECA ::= Incluir Menor_que Identificador Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("BIBLIOTECA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BIBLIOTECA ::= Incluir Menor_que Identificador Punto Identificador Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("BIBLIOTECA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

